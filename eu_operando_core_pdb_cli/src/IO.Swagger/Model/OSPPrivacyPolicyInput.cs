/* 
 * Policy DB
 *
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace eu.operando.core.pdb.cli.Model
{
    /// <summary>
    /// OSPPrivacyPolicyInput
    /// </summary>
    [DataContract]
    public partial class OSPPrivacyPolicyInput :  IEquatable<OSPPrivacyPolicyInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OSPPrivacyPolicyInput" /> class.
        /// </summary>
        /// <param name="PolicyText">The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. .</param>
        /// <param name="PolicyUrl">The url location of the privacy policy of the OSP .</param>
        /// <param name="Workflow">The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. .</param>
        /// <param name="Policies">The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. .</param>
        public OSPPrivacyPolicyInput(string PolicyText = null, string PolicyUrl = null, List<OSPDataRequest> Workflow = null, List<AccessPolicy> Policies = null)
        {
            this.PolicyText = PolicyText;
            this.PolicyUrl = PolicyUrl;
            this.Workflow = Workflow;
            this.Policies = Policies;
        }
        
        /// <summary>
        /// The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. 
        /// </summary>
        /// <value>The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. </value>
        [DataMember(Name="policy_text", EmitDefaultValue=false)]
        public string PolicyText { get; set; }
        /// <summary>
        /// The url location of the privacy policy of the OSP 
        /// </summary>
        /// <value>The url location of the privacy policy of the OSP </value>
        [DataMember(Name="policy_url", EmitDefaultValue=false)]
        public string PolicyUrl { get; set; }
        /// <summary>
        /// The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. 
        /// </summary>
        /// <value>The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. </value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public List<OSPDataRequest> Workflow { get; set; }
        /// <summary>
        /// The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. 
        /// </summary>
        /// <value>The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. </value>
        [DataMember(Name="policies", EmitDefaultValue=false)]
        public List<AccessPolicy> Policies { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OSPPrivacyPolicyInput {\n");
            sb.Append("  PolicyText: ").Append(PolicyText).Append("\n");
            sb.Append("  PolicyUrl: ").Append(PolicyUrl).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OSPPrivacyPolicyInput);
        }

        /// <summary>
        /// Returns true if OSPPrivacyPolicyInput instances are equal
        /// </summary>
        /// <param name="other">Instance of OSPPrivacyPolicyInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OSPPrivacyPolicyInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PolicyText == other.PolicyText ||
                    this.PolicyText != null &&
                    this.PolicyText.Equals(other.PolicyText)
                ) && 
                (
                    this.PolicyUrl == other.PolicyUrl ||
                    this.PolicyUrl != null &&
                    this.PolicyUrl.Equals(other.PolicyUrl)
                ) && 
                (
                    this.Workflow == other.Workflow ||
                    this.Workflow != null &&
                    this.Workflow.SequenceEqual(other.Workflow)
                ) && 
                (
                    this.Policies == other.Policies ||
                    this.Policies != null &&
                    this.Policies.SequenceEqual(other.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PolicyText != null)
                    hash = hash * 59 + this.PolicyText.GetHashCode();
                if (this.PolicyUrl != null)
                    hash = hash * 59 + this.PolicyUrl.GetHashCode();
                if (this.Workflow != null)
                    hash = hash * 59 + this.Workflow.GetHashCode();
                if (this.Policies != null)
                    hash = hash * 59 + this.Policies.GetHashCode();
                return hash;
            }
        }
    }

}

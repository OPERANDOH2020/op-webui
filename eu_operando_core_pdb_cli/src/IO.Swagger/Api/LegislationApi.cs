/* 
 * Policy DB
 *
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using eu.operando.core.pdb.cli.Client;
using eu.operando.core.pdb.cli.Model;

namespace eu.operando.core.pdb.cli.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILegislationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform a search query across the collection of regulation.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>List&lt;PrivacyRegulation&gt;</returns>
        List<PrivacyRegulation> RegulationsGet (string filter);

        /// <summary>
        /// Perform a search query across the collection of regulation.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>ApiResponse of List&lt;PrivacyRegulation&gt;</returns>
        ApiResponse<List<PrivacyRegulation>> RegulationsGetWithHttpInfo (string filter);
        /// <summary>
        /// Create a new legislation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>PrivacyRegulation</returns>
        PrivacyRegulation RegulationsPost (PrivacyRegulationInput regulation);

        /// <summary>
        /// Create a new legislation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>ApiResponse of PrivacyRegulation</returns>
        ApiResponse<PrivacyRegulation> RegulationsPostWithHttpInfo (PrivacyRegulationInput regulation);
        /// <summary>
        /// Remove the PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns></returns>
        void RegulationsRegIdDelete (string regId);

        /// <summary>
        /// Remove the PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegulationsRegIdDeleteWithHttpInfo (string regId);
        /// <summary>
        /// Read a given legislation with its ID.
        /// </summary>
        /// <remarks>
        /// Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>PrivacyRegulation</returns>
        PrivacyRegulation RegulationsRegIdGet (string regId);

        /// <summary>
        /// Read a given legislation with its ID.
        /// </summary>
        /// <remarks>
        /// Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>ApiResponse of PrivacyRegulation</returns>
        ApiResponse<PrivacyRegulation> RegulationsRegIdGetWithHttpInfo (string regId);
        /// <summary>
        /// Update PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns></returns>
        void RegulationsRegIdPut (string regId, PrivacyRegulationInput regulation);

        /// <summary>
        /// Update PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegulationsRegIdPutWithHttpInfo (string regId, PrivacyRegulationInput regulation);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform a search query across the collection of regulation.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of List&lt;PrivacyRegulation&gt;</returns>
        System.Threading.Tasks.Task<List<PrivacyRegulation>> RegulationsGetAsync (string filter);

        /// <summary>
        /// Perform a search query across the collection of regulation.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of ApiResponse (List&lt;PrivacyRegulation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PrivacyRegulation>>> RegulationsGetAsyncWithHttpInfo (string filter);
        /// <summary>
        /// Create a new legislation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>Task of PrivacyRegulation</returns>
        System.Threading.Tasks.Task<PrivacyRegulation> RegulationsPostAsync (PrivacyRegulationInput regulation);

        /// <summary>
        /// Create a new legislation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>Task of ApiResponse (PrivacyRegulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivacyRegulation>> RegulationsPostAsyncWithHttpInfo (PrivacyRegulationInput regulation);
        /// <summary>
        /// Remove the PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegulationsRegIdDeleteAsync (string regId);

        /// <summary>
        /// Remove the PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegulationsRegIdDeleteAsyncWithHttpInfo (string regId);
        /// <summary>
        /// Read a given legislation with its ID.
        /// </summary>
        /// <remarks>
        /// Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of PrivacyRegulation</returns>
        System.Threading.Tasks.Task<PrivacyRegulation> RegulationsRegIdGetAsync (string regId);

        /// <summary>
        /// Read a given legislation with its ID.
        /// </summary>
        /// <remarks>
        /// Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of ApiResponse (PrivacyRegulation)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivacyRegulation>> RegulationsRegIdGetAsyncWithHttpInfo (string regId);
        /// <summary>
        /// Update PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegulationsRegIdPutAsync (string regId, PrivacyRegulationInput regulation);

        /// <summary>
        /// Update PrivacyRegulation entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegulationsRegIdPutAsyncWithHttpInfo (string regId, PrivacyRegulationInput regulation);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LegislationApi : ILegislationApi
    {
        private eu.operando.core.pdb.cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LegislationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LegislationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = eu.operando.core.pdb.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LegislationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LegislationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eu.operando.core.pdb.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eu.operando.core.pdb.cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform a search query across the collection of regulation. The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>List&lt;PrivacyRegulation&gt;</returns>
        public List<PrivacyRegulation> RegulationsGet (string filter)
        {
             ApiResponse<List<PrivacyRegulation>> localVarResponse = RegulationsGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a search query across the collection of regulation. The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>ApiResponse of List&lt;PrivacyRegulation&gt;</returns>
        public ApiResponse< List<PrivacyRegulation> > RegulationsGetWithHttpInfo (string filter)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling LegislationApi->RegulationsGet");

            var localVarPath = "/regulations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrivacyRegulation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrivacyRegulation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrivacyRegulation>)));
            
        }

        /// <summary>
        /// Perform a search query across the collection of regulation. The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of List&lt;PrivacyRegulation&gt;</returns>
        public async System.Threading.Tasks.Task<List<PrivacyRegulation>> RegulationsGetAsync (string filter)
        {
             ApiResponse<List<PrivacyRegulation>> localVarResponse = await RegulationsGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a search query across the collection of regulation. The query contains a json object (names, values) and the request returns  the list of documents (regulations) where the filter matches i.e. the  document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of ApiResponse (List&lt;PrivacyRegulation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PrivacyRegulation>>> RegulationsGetAsyncWithHttpInfo (string filter)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling LegislationApi->RegulationsGet");

            var localVarPath = "/regulations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrivacyRegulation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrivacyRegulation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrivacyRegulation>)));
            
        }

        /// <summary>
        /// Create a new legislation entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>PrivacyRegulation</returns>
        public PrivacyRegulation RegulationsPost (PrivacyRegulationInput regulation)
        {
             ApiResponse<PrivacyRegulation> localVarResponse = RegulationsPostWithHttpInfo(regulation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new legislation entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>ApiResponse of PrivacyRegulation</returns>
        public ApiResponse< PrivacyRegulation > RegulationsPostWithHttpInfo (PrivacyRegulationInput regulation)
        {
            // verify the required parameter 'regulation' is set
            if (regulation == null)
                throw new ApiException(400, "Missing required parameter 'regulation' when calling LegislationApi->RegulationsPost");

            var localVarPath = "/regulations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulation != null && regulation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(regulation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = regulation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivacyRegulation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivacyRegulation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivacyRegulation)));
            
        }

        /// <summary>
        /// Create a new legislation entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>Task of PrivacyRegulation</returns>
        public async System.Threading.Tasks.Task<PrivacyRegulation> RegulationsPostAsync (PrivacyRegulationInput regulation)
        {
             ApiResponse<PrivacyRegulation> localVarResponse = await RegulationsPostAsyncWithHttpInfo(regulation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new legislation entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulation">The first instance of this regulation document</param>
        /// <returns>Task of ApiResponse (PrivacyRegulation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivacyRegulation>> RegulationsPostAsyncWithHttpInfo (PrivacyRegulationInput regulation)
        {
            // verify the required parameter 'regulation' is set
            if (regulation == null)
                throw new ApiException(400, "Missing required parameter 'regulation' when calling LegislationApi->RegulationsPost");

            var localVarPath = "/regulations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regulation != null && regulation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(regulation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = regulation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivacyRegulation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivacyRegulation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivacyRegulation)));
            
        }

        /// <summary>
        /// Remove the PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns></returns>
        public void RegulationsRegIdDelete (string regId)
        {
             RegulationsRegIdDeleteWithHttpInfo(regId);
        }

        /// <summary>
        /// Remove the PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegulationsRegIdDeleteWithHttpInfo (string regId)
        {
            // verify the required parameter 'regId' is set
            if (regId == null)
                throw new ApiException(400, "Missing required parameter 'regId' when calling LegislationApi->RegulationsRegIdDelete");

            var localVarPath = "/regulations/{reg-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regId != null) localVarPathParams.Add("reg-id", Configuration.ApiClient.ParameterToString(regId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsRegIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegulationsRegIdDeleteAsync (string regId)
        {
             await RegulationsRegIdDeleteAsyncWithHttpInfo(regId);

        }

        /// <summary>
        /// Remove the PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegulationsRegIdDeleteAsyncWithHttpInfo (string regId)
        {
            // verify the required parameter 'regId' is set
            if (regId == null)
                throw new ApiException(400, "Missing required parameter 'regId' when calling LegislationApi->RegulationsRegIdDelete");

            var localVarPath = "/regulations/{reg-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regId != null) localVarPathParams.Add("reg-id", Configuration.ApiClient.ParameterToString(regId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsRegIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Read a given legislation with its ID. Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>PrivacyRegulation</returns>
        public PrivacyRegulation RegulationsRegIdGet (string regId)
        {
             ApiResponse<PrivacyRegulation> localVarResponse = RegulationsRegIdGetWithHttpInfo(regId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read a given legislation with its ID. Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>ApiResponse of PrivacyRegulation</returns>
        public ApiResponse< PrivacyRegulation > RegulationsRegIdGetWithHttpInfo (string regId)
        {
            // verify the required parameter 'regId' is set
            if (regId == null)
                throw new ApiException(400, "Missing required parameter 'regId' when calling LegislationApi->RegulationsRegIdGet");

            var localVarPath = "/regulations/{reg-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regId != null) localVarPathParams.Add("reg-id", Configuration.ApiClient.ParameterToString(regId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsRegIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivacyRegulation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivacyRegulation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivacyRegulation)));
            
        }

        /// <summary>
        /// Read a given legislation with its ID. Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of PrivacyRegulation</returns>
        public async System.Threading.Tasks.Task<PrivacyRegulation> RegulationsRegIdGetAsync (string regId)
        {
             ApiResponse<PrivacyRegulation> localVarResponse = await RegulationsRegIdGetAsyncWithHttpInfo(regId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read a given legislation with its ID. Get a specific legislation document via the id. This will return the  full legislation document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <returns>Task of ApiResponse (PrivacyRegulation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivacyRegulation>> RegulationsRegIdGetAsyncWithHttpInfo (string regId)
        {
            // verify the required parameter 'regId' is set
            if (regId == null)
                throw new ApiException(400, "Missing required parameter 'regId' when calling LegislationApi->RegulationsRegIdGet");

            var localVarPath = "/regulations/{reg-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regId != null) localVarPathParams.Add("reg-id", Configuration.ApiClient.ParameterToString(regId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsRegIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivacyRegulation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivacyRegulation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivacyRegulation)));
            
        }

        /// <summary>
        /// Update PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns></returns>
        public void RegulationsRegIdPut (string regId, PrivacyRegulationInput regulation)
        {
             RegulationsRegIdPutWithHttpInfo(regId, regulation);
        }

        /// <summary>
        /// Update PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegulationsRegIdPutWithHttpInfo (string regId, PrivacyRegulationInput regulation)
        {
            // verify the required parameter 'regId' is set
            if (regId == null)
                throw new ApiException(400, "Missing required parameter 'regId' when calling LegislationApi->RegulationsRegIdPut");
            // verify the required parameter 'regulation' is set
            if (regulation == null)
                throw new ApiException(400, "Missing required parameter 'regulation' when calling LegislationApi->RegulationsRegIdPut");

            var localVarPath = "/regulations/{reg-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regId != null) localVarPathParams.Add("reg-id", Configuration.ApiClient.ParameterToString(regId)); // path parameter
            if (regulation != null && regulation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(regulation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = regulation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsRegIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegulationsRegIdPutAsync (string regId, PrivacyRegulationInput regulation)
        {
             await RegulationsRegIdPutAsyncWithHttpInfo(regId, regulation);

        }

        /// <summary>
        /// Update PrivacyRegulation entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new PrivacyRegulation document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regId">The identifier number of a regulation</param>
        /// <param name="regulation">The changed instance of this PrivacyRegulation</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegulationsRegIdPutAsyncWithHttpInfo (string regId, PrivacyRegulationInput regulation)
        {
            // verify the required parameter 'regId' is set
            if (regId == null)
                throw new ApiException(400, "Missing required parameter 'regId' when calling LegislationApi->RegulationsRegIdPut");
            // verify the required parameter 'regulation' is set
            if (regulation == null)
                throw new ApiException(400, "Missing required parameter 'regulation' when calling LegislationApi->RegulationsRegIdPut");

            var localVarPath = "/regulations/{reg-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (regId != null) localVarPathParams.Add("reg-id", Configuration.ApiClient.ParameterToString(regId)); // path parameter
            if (regulation != null && regulation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(regulation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = regulation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegulationsRegIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * OSP Enforcement (OSE)
 *
 *  The OSP enforcement component provides a set of functions that manage the interaction of OSP behaviour with the user's private data. The OSE component is largely in charge of ensuring that an OSP follows both privacy regulations and policies put in place by the user (i.e. in the OPERANDO UPPs). There are a set of events that trigger the usage of this API.  1) When a new G2C OSP registers with OPERANDO via the OPERANDO console. The management console informs the OSE, which then checks that an OSP conforms with existing privacy regulations; if it breaches the regulations, the OSE returns via the management console a report describing the breaches.  2) When a change of OSP privacy policy or of the OSP's privacy settings are detected by the watchdog component. The watchdog component sends a message to a privacy analyst who reviews any changes. The privacy analyst may then inform the OSE of the new OSP information (to be checked for compliance with regulations and users' UPPs.  3) When a privacy legislation is entered (or changed) via the Regulator API. The OSE checks registered OSPs for compliance with the new regulations; where there is a breach the OSP is notified either by e-mail or the console. 
 *
 * OpenAPI spec version: 0.0.8
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using eu.operando.core.ose.cli.Client;
using eu.operando.core.ose.cli.Model;

namespace eu.operando.core.ose.cli.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrivacySettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>List&lt;PrivacySetting&gt;</returns>
        List<PrivacySetting> OspsOspIdPrivacySettingsGet (string ospId, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>ApiResponse of List&lt;PrivacySetting&gt;</returns>
        ApiResponse<List<PrivacySetting>> OspsOspIdPrivacySettingsGetWithHttpInfo (string ospId, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns></returns>
        void OspsOspIdPrivacySettingsPut (string ospId, string userId, List<PrivacySetting> ospSettings);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OspsOspIdPrivacySettingsPutWithHttpInfo (string ospId, string userId, List<PrivacySetting> ospSettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>Task of List&lt;PrivacySetting&gt;</returns>
        System.Threading.Tasks.Task<List<PrivacySetting>> OspsOspIdPrivacySettingsGetAsync (string ospId, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;PrivacySetting&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PrivacySetting>>> OspsOspIdPrivacySettingsGetAsyncWithHttpInfo (string ospId, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OspsOspIdPrivacySettingsPutAsync (string ospId, string userId, List<PrivacySetting> ospSettings);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdPrivacySettingsPutAsyncWithHttpInfo (string ospId, string userId, List<PrivacySetting> ospSettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrivacySettingsApi : IPrivacySettingsApi
    {
        private eu.operando.core.ose.cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivacySettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrivacySettingsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = eu.operando.core.ose.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivacySettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrivacySettingsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eu.operando.core.ose.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eu.operando.core.ose.cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>List&lt;PrivacySetting&gt;</returns>
        public List<PrivacySetting> OspsOspIdPrivacySettingsGet (string ospId, string userId)
        {
             ApiResponse<List<PrivacySetting>> localVarResponse = OspsOspIdPrivacySettingsGetWithHttpInfo(ospId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>ApiResponse of List&lt;PrivacySetting&gt;</returns>
        public ApiResponse< List<PrivacySetting> > OspsOspIdPrivacySettingsGetWithHttpInfo (string ospId, string userId)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsGet");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsGet");

            var localVarPath = "/osps/{osp-id}/privacy_settings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (userId != null) localVarQueryParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPrivacySettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrivacySetting>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrivacySetting>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrivacySetting>)));
            
        }

        /// <summary>
        ///  Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>Task of List&lt;PrivacySetting&gt;</returns>
        public async System.Threading.Tasks.Task<List<PrivacySetting>> OspsOspIdPrivacySettingsGetAsync (string ospId, string userId)
        {
             ApiResponse<List<PrivacySetting>> localVarResponse = await OspsOspIdPrivacySettingsGetAsyncWithHttpInfo(ospId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Simple retrieval of an OPERANDO registered OSP&#39;s privacy settings. This method is called by the watchdog component when it requests the settings last applied by the OSE component.  Pre condition - - An OPERANDO user must have registered with the OPERANDO platform and subscribed to the OSP service in question.  Pre condition - -The user&#39;s UPP must be stored in the Policy DB component and contain the privacy settings for the OSP service in question.  When the query includes a user id; that user&#39;s settings are returned. For a request with no user id as a query parameter, the operation returns the general set of settings covered by this OSP. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <returns>Task of ApiResponse (List&lt;PrivacySetting&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PrivacySetting>>> OspsOspIdPrivacySettingsGetAsyncWithHttpInfo (string ospId, string userId)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsGet");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsGet");

            var localVarPath = "/osps/{osp-id}/privacy_settings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (userId != null) localVarQueryParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPrivacySettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrivacySetting>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrivacySetting>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrivacySetting>)));
            
        }

        /// <summary>
        ///  Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns></returns>
        public void OspsOspIdPrivacySettingsPut (string ospId, string userId, List<PrivacySetting> ospSettings)
        {
             OspsOspIdPrivacySettingsPutWithHttpInfo(ospId, userId, ospSettings);
        }

        /// <summary>
        ///  Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OspsOspIdPrivacySettingsPutWithHttpInfo (string ospId, string userId, List<PrivacySetting> ospSettings)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsPut");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsPut");
            // verify the required parameter 'ospSettings' is set
            if (ospSettings == null)
                throw new ApiException(400, "Missing required parameter 'ospSettings' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsPut");

            var localVarPath = "/osps/{osp-id}/privacy_settings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (userId != null) localVarQueryParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ospSettings != null && ospSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospSettings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPrivacySettingsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OspsOspIdPrivacySettingsPutAsync (string ospId, string userId, List<PrivacySetting> ospSettings)
        {
             await OspsOspIdPrivacySettingsPutAsyncWithHttpInfo(ospId, userId, ospSettings);

        }

        /// <summary>
        ///  Called when a change in privacy settings is detected at a specific OSP. The OSE evaluates the impact of the changed settings and computes the required new settings and ensures that they are enforced at the OSP and the new settings stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospSettings">The set of settings that have now changed. This is the complete OSP settings list to be compared with the existing stored settings for this OSP for the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdPrivacySettingsPutAsyncWithHttpInfo (string ospId, string userId, List<PrivacySetting> ospSettings)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsPut");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsPut");
            // verify the required parameter 'ospSettings' is set
            if (ospSettings == null)
                throw new ApiException(400, "Missing required parameter 'ospSettings' when calling PrivacySettingsApi->OspsOspIdPrivacySettingsPut");

            var localVarPath = "/osps/{osp-id}/privacy_settings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (userId != null) localVarQueryParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (ospSettings != null && ospSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospSettings; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPrivacySettingsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

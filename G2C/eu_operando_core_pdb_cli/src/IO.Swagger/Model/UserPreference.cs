/* 
 * Policy DB
 *
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace eu.operando.core.pdb.cli.Model
{
    /// <summary>
    /// UserPreference
    /// </summary>
    [DataContract]
    public partial class UserPreference :  IEquatable<UserPreference>
    {
        /// <summary>
        /// The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? 
        /// </summary>
        /// <value>The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InformationtypeEnum
        {
            
            /// <summary>
            /// Enum Identification for "Identification"
            /// </summary>
            [EnumMember(Value = "Identification")]
            Identification,
            
            /// <summary>
            /// Enum SharedIdentification for "Shared Identification"
            /// </summary>
            [EnumMember(Value = "Shared Identification")]
            SharedIdentification,
            
            /// <summary>
            /// Enum Geographic for "Geographic"
            /// </summary>
            [EnumMember(Value = "Geographic")]
            Geographic,
            
            /// <summary>
            /// Enum Temporal for "Temporal"
            /// </summary>
            [EnumMember(Value = "Temporal")]
            Temporal,
            
            /// <summary>
            /// Enum Networkandrelationships for "Network and relationships"
            /// </summary>
            [EnumMember(Value = "Network and relationships")]
            Networkandrelationships,
            
            /// <summary>
            /// Enum Objects for "Objects"
            /// </summary>
            [EnumMember(Value = "Objects")]
            Objects,
            
            /// <summary>
            /// Enum Behavioural for "Behavioural"
            /// </summary>
            [EnumMember(Value = "Behavioural")]
            Behavioural,
            
            /// <summary>
            /// Enum Beliefs for "Beliefs"
            /// </summary>
            [EnumMember(Value = "Beliefs")]
            Beliefs,
            
            /// <summary>
            /// Enum Measurements for "Measurements"
            /// </summary>
            [EnumMember(Value = "Measurements")]
            Measurements
        }

        /// <summary>
        /// The category of the service invading the privacy of the user. 
        /// </summary>
        /// <value>The category of the service invading the privacy of the user. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum Healthcare for "Healthcare"
            /// </summary>
            [EnumMember(Value = "Healthcare")]
            Healthcare,
            
            /// <summary>
            /// Enum Finance for "Finance"
            /// </summary>
            [EnumMember(Value = "Finance")]
            Finance,
            
            /// <summary>
            /// Enum Web for "Web"
            /// </summary>
            [EnumMember(Value = "Web")]
            Web,
            
            /// <summary>
            /// Enum SocialNetwork for "Social Network"
            /// </summary>
            [EnumMember(Value = "Social Network")]
            SocialNetwork
        }

        /// <summary>
        /// The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. 
        /// </summary>
        /// <value>The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PreferenceEnum
        {
            
            /// <summary>
            /// Enum High for "High"
            /// </summary>
            [EnumMember(Value = "High")]
            High,
            
            /// <summary>
            /// Enum Medium for "Medium"
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium,
            
            /// <summary>
            /// Enum Low for "Low"
            /// </summary>
            [EnumMember(Value = "Low")]
            Low
        }

        /// <summary>
        /// The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  
        /// </summary>
        /// <value>The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Collect for "Collect"
            /// </summary>
            [EnumMember(Value = "Collect")]
            Collect,
            
            /// <summary>
            /// Enum Access for "Access"
            /// </summary>
            [EnumMember(Value = "Access")]
            Access,
            
            /// <summary>
            /// Enum Use for "Use"
            /// </summary>
            [EnumMember(Value = "Use")]
            Use,
            
            /// <summary>
            /// Enum Disclose for "Disclose"
            /// </summary>
            [EnumMember(Value = "Disclose")]
            Disclose,
            
            /// <summary>
            /// Enum Archive for "Archive"
            /// </summary>
            [EnumMember(Value = "Archive")]
            Archive
        }

        /// <summary>
        /// The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? 
        /// </summary>
        /// <value>The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? </value>
        [DataMember(Name="informationtype", EmitDefaultValue=false)]
        public InformationtypeEnum? Informationtype { get; set; }
        /// <summary>
        /// The category of the service invading the privacy of the user. 
        /// </summary>
        /// <value>The category of the service invading the privacy of the user. </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. 
        /// </summary>
        /// <value>The user's privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. </value>
        [DataMember(Name="preference", EmitDefaultValue=false)]
        public PreferenceEnum? Preference { get; set; }
        /// <summary>
        /// The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  
        /// </summary>
        /// <value>The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  </value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreference" /> class.
        /// </summary>
        /// <param name="Informationtype">The type of private information; e.g. is it information that identifies the user (e.g. id number)? is it location information about the user? Is it about their activities? .</param>
        /// <param name="Category">The category of the service invading the privacy of the user. .</param>
        /// <param name="Preference">The user&#39;s privacy preference. High means they are sensitive to disclosing private information. Medium they have concerns; and low means they have few privacy concerns with this question. .</param>
        /// <param name="Role">The role of a person or service that the private information is being disclosed to or used by. This is an optional parameter in the case where users drill down to more detailed preferences. .</param>
        /// <param name="Action">The action being carried out on the private date e.g. accessing, disclosing to a third party. This is an optional parameter in the case where users drill down to more detailed preferences.  .</param>
        /// <param name="Purpose">The purpose for which the service is using the private data. This is an optional parameter in the case where users drill down to more detailed preferences. .</param>
        /// <param name="Recipient">The recipient of any disclosed privacy information. This is an optional parameter in the case where users drill down to more detailed preferences. .</param>
        public UserPreference(InformationtypeEnum? Informationtype = null, CategoryEnum? Category = null, PreferenceEnum? Preference = null, string Role = null, ActionEnum? Action = null, string Purpose = null, string Recipient = null)
        {
            this.Informationtype = Informationtype;
            this.Category = Category;
            this.Preference = Preference;
            this.Role = Role;
            this.Action = Action;
            this.Purpose = Purpose;
            this.Recipient = Recipient;
        }
        
        /// <summary>
        /// The role of a person or service that the private information is being disclosed to or used by. This is an optional parameter in the case where users drill down to more detailed preferences. 
        /// </summary>
        /// <value>The role of a person or service that the private information is being disclosed to or used by. This is an optional parameter in the case where users drill down to more detailed preferences. </value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }
        /// <summary>
        /// The purpose for which the service is using the private data. This is an optional parameter in the case where users drill down to more detailed preferences. 
        /// </summary>
        /// <value>The purpose for which the service is using the private data. This is an optional parameter in the case where users drill down to more detailed preferences. </value>
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }
        /// <summary>
        /// The recipient of any disclosed privacy information. This is an optional parameter in the case where users drill down to more detailed preferences. 
        /// </summary>
        /// <value>The recipient of any disclosed privacy information. This is an optional parameter in the case where users drill down to more detailed preferences. </value>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public string Recipient { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPreference {\n");
            sb.Append("  Informationtype: ").Append(Informationtype).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Preference: ").Append(Preference).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserPreference);
        }

        /// <summary>
        /// Returns true if UserPreference instances are equal
        /// </summary>
        /// <param name="other">Instance of UserPreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPreference other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Informationtype == other.Informationtype ||
                    this.Informationtype != null &&
                    this.Informationtype.Equals(other.Informationtype)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Preference == other.Preference ||
                    this.Preference != null &&
                    this.Preference.Equals(other.Preference)
                ) && 
                (
                    this.Role == other.Role ||
                    this.Role != null &&
                    this.Role.Equals(other.Role)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Purpose == other.Purpose ||
                    this.Purpose != null &&
                    this.Purpose.Equals(other.Purpose)
                ) && 
                (
                    this.Recipient == other.Recipient ||
                    this.Recipient != null &&
                    this.Recipient.Equals(other.Recipient)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Informationtype != null)
                    hash = hash * 59 + this.Informationtype.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Preference != null)
                    hash = hash * 59 + this.Preference.GetHashCode();
                if (this.Role != null)
                    hash = hash * 59 + this.Role.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Purpose != null)
                    hash = hash * 59 + this.Purpose.GetHashCode();
                if (this.Recipient != null)
                    hash = hash * 59 + this.Recipient.GetHashCode();
                return hash;
            }
        }
    }

}

/* 
 * Policy DB
 *
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using eu.operando.core.pdb.cli.Client;
using eu.operando.core.pdb.cli.Model;

namespace eu.operando.core.pdb.cli.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOSPApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform a search query across the collection of OSP behaviour.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>List&lt;OSPPrivacyPolicy&gt;</returns>
        List<OSPPrivacyPolicy> OSPGet (string filter);

        /// <summary>
        /// Perform a search query across the collection of OSP behaviour.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>ApiResponse of List&lt;OSPPrivacyPolicy&gt;</returns>
        ApiResponse<List<OSPPrivacyPolicy>> OSPGetWithHttpInfo (string filter);
        /// <summary>
        /// Remove the OSPRequest entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns></returns>
        void OSPOspIdDelete (string ospId);

        /// <summary>
        /// Remove the OSPRequest entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OSPOspIdDeleteWithHttpInfo (string ospId);
        /// <summary>
        /// Read a given OSP behaviour policy.
        /// </summary>
        /// <remarks>
        /// Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>OSPPrivacyPolicy</returns>
        OSPPrivacyPolicy OSPOspIdGet (string ospId);

        /// <summary>
        /// Read a given OSP behaviour policy.
        /// </summary>
        /// <remarks>
        /// Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>ApiResponse of OSPPrivacyPolicy</returns>
        ApiResponse<OSPPrivacyPolicy> OSPOspIdGetWithHttpInfo (string ospId);
        /// <summary>
        /// Update OSPBehaviour entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns></returns>
        void OSPOspIdPut (string ospId, OSPPrivacyPolicyInput ospPolicy);

        /// <summary>
        /// Update OSPBehaviour entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OSPOspIdPutWithHttpInfo (string ospId, OSPPrivacyPolicyInput ospPolicy);
        /// <summary>
        /// Create a new OSP entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns></returns>
        void OSPPost (OSPPrivacyPolicyInput ospPolicy);

        /// <summary>
        /// Create a new OSP entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OSPPostWithHttpInfo (OSPPrivacyPolicyInput ospPolicy);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform a search query across the collection of OSP behaviour.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of List&lt;OSPPrivacyPolicy&gt;</returns>
        System.Threading.Tasks.Task<List<OSPPrivacyPolicy>> OSPGetAsync (string filter);

        /// <summary>
        /// Perform a search query across the collection of OSP behaviour.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of ApiResponse (List&lt;OSPPrivacyPolicy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OSPPrivacyPolicy>>> OSPGetAsyncWithHttpInfo (string filter);
        /// <summary>
        /// Remove the OSPRequest entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OSPOspIdDeleteAsync (string ospId);

        /// <summary>
        /// Remove the OSPRequest entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OSPOspIdDeleteAsyncWithHttpInfo (string ospId);
        /// <summary>
        /// Read a given OSP behaviour policy.
        /// </summary>
        /// <remarks>
        /// Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of OSPPrivacyPolicy</returns>
        System.Threading.Tasks.Task<OSPPrivacyPolicy> OSPOspIdGetAsync (string ospId);

        /// <summary>
        /// Read a given OSP behaviour policy.
        /// </summary>
        /// <remarks>
        /// Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of ApiResponse (OSPPrivacyPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<OSPPrivacyPolicy>> OSPOspIdGetAsyncWithHttpInfo (string ospId);
        /// <summary>
        /// Update OSPBehaviour entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OSPOspIdPutAsync (string ospId, OSPPrivacyPolicyInput ospPolicy);

        /// <summary>
        /// Update OSPBehaviour entry in the database.
        /// </summary>
        /// <remarks>
        /// Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OSPOspIdPutAsyncWithHttpInfo (string ospId, OSPPrivacyPolicyInput ospPolicy);
        /// <summary>
        /// Create a new OSP entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OSPPostAsync (OSPPrivacyPolicyInput ospPolicy);

        /// <summary>
        /// Create a new OSP entry in the database.
        /// </summary>
        /// <remarks>
        /// Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OSPPostAsyncWithHttpInfo (OSPPrivacyPolicyInput ospPolicy);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OSPApi : IOSPApi
    {
        private eu.operando.core.pdb.cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OSPApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OSPApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = eu.operando.core.pdb.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OSPApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OSPApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eu.operando.core.pdb.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eu.operando.core.pdb.cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform a search query across the collection of OSP behaviour. The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>List&lt;OSPPrivacyPolicy&gt;</returns>
        public List<OSPPrivacyPolicy> OSPGet (string filter)
        {
             ApiResponse<List<OSPPrivacyPolicy>> localVarResponse = OSPGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a search query across the collection of OSP behaviour. The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>ApiResponse of List&lt;OSPPrivacyPolicy&gt;</returns>
        public ApiResponse< List<OSPPrivacyPolicy> > OSPGetWithHttpInfo (string filter)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling OSPApi->OSPGet");

            var localVarPath = "/OSP/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OSPPrivacyPolicy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OSPPrivacyPolicy>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OSPPrivacyPolicy>)));
            
        }

        /// <summary>
        /// Perform a search query across the collection of OSP behaviour. The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of List&lt;OSPPrivacyPolicy&gt;</returns>
        public async System.Threading.Tasks.Task<List<OSPPrivacyPolicy>> OSPGetAsync (string filter)
        {
             ApiResponse<List<OSPPrivacyPolicy>> localVarResponse = await OSPGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a search query across the collection of OSP behaviour. The query contains a json object (names, values) and the request returns the list of documents (regulations) where the filter matches i.e. the document contains fields with those values. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The query filter to be matched - ?filter&#x3D;{json description}</param>
        /// <returns>Task of ApiResponse (List&lt;OSPPrivacyPolicy&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OSPPrivacyPolicy>>> OSPGetAsyncWithHttpInfo (string filter)
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new ApiException(400, "Missing required parameter 'filter' when calling OSPApi->OSPGet");

            var localVarPath = "/OSP/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OSPPrivacyPolicy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OSPPrivacyPolicy>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OSPPrivacyPolicy>)));
            
        }

        /// <summary>
        /// Remove the OSPRequest entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns></returns>
        public void OSPOspIdDelete (string ospId)
        {
             OSPOspIdDeleteWithHttpInfo(ospId);
        }

        /// <summary>
        /// Remove the OSPRequest entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OSPOspIdDeleteWithHttpInfo (string ospId)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling OSPApi->OSPOspIdDelete");

            var localVarPath = "/OSP/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPOspIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the OSPRequest entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OSPOspIdDeleteAsync (string ospId)
        {
             await OSPOspIdDeleteAsyncWithHttpInfo(ospId);

        }

        /// <summary>
        /// Remove the OSPRequest entry in the database. Called when by the policy computation component when the regulator api requests that the regulation be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OSPOspIdDeleteAsyncWithHttpInfo (string ospId)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling OSPApi->OSPOspIdDelete");

            var localVarPath = "/OSP/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPOspIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Read a given OSP behaviour policy. Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>OSPPrivacyPolicy</returns>
        public OSPPrivacyPolicy OSPOspIdGet (string ospId)
        {
             ApiResponse<OSPPrivacyPolicy> localVarResponse = OSPOspIdGetWithHttpInfo(ospId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read a given OSP behaviour policy. Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>ApiResponse of OSPPrivacyPolicy</returns>
        public ApiResponse< OSPPrivacyPolicy > OSPOspIdGetWithHttpInfo (string ospId)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling OSPApi->OSPOspIdGet");

            var localVarPath = "/OSP/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPOspIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OSPPrivacyPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OSPPrivacyPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OSPPrivacyPolicy)));
            
        }

        /// <summary>
        /// Read a given OSP behaviour policy. Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of OSPPrivacyPolicy</returns>
        public async System.Threading.Tasks.Task<OSPPrivacyPolicy> OSPOspIdGetAsync (string ospId)
        {
             ApiResponse<OSPPrivacyPolicy> localVarResponse = await OSPOspIdGetAsyncWithHttpInfo(ospId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read a given OSP behaviour policy. Get a specific OSP document via the id. This will return the full OSP document in json format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <returns>Task of ApiResponse (OSPPrivacyPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OSPPrivacyPolicy>> OSPOspIdGetAsyncWithHttpInfo (string ospId)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling OSPApi->OSPOspIdGet");

            var localVarPath = "/OSP/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPOspIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OSPPrivacyPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OSPPrivacyPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OSPPrivacyPolicy)));
            
        }

        /// <summary>
        /// Update OSPBehaviour entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns></returns>
        public void OSPOspIdPut (string ospId, OSPPrivacyPolicyInput ospPolicy)
        {
             OSPOspIdPutWithHttpInfo(ospId, ospPolicy);
        }

        /// <summary>
        /// Update OSPBehaviour entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OSPOspIdPutWithHttpInfo (string ospId, OSPPrivacyPolicyInput ospPolicy)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling OSPApi->OSPOspIdPut");
            // verify the required parameter 'ospPolicy' is set
            if (ospPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ospPolicy' when calling OSPApi->OSPOspIdPut");

            var localVarPath = "/OSP/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospPolicy != null && ospPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospPolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPOspIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update OSPBehaviour entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OSPOspIdPutAsync (string ospId, OSPPrivacyPolicyInput ospPolicy)
        {
             await OSPOspIdPutAsyncWithHttpInfo(ospId, ospPolicy);

        }

        /// <summary>
        /// Update OSPBehaviour entry in the database. Called when by the policy computation component when the regulator api updates a regulation. Their new OSPRequest document is stored in the policy DB. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The changed instance of this OSPRequest</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OSPOspIdPutAsyncWithHttpInfo (string ospId, OSPPrivacyPolicyInput ospPolicy)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling OSPApi->OSPOspIdPut");
            // verify the required parameter 'ospPolicy' is set
            if (ospPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ospPolicy' when calling OSPApi->OSPOspIdPut");

            var localVarPath = "/OSP/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospPolicy != null && ospPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospPolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPOspIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new OSP entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns></returns>
        public void OSPPost (OSPPrivacyPolicyInput ospPolicy)
        {
             OSPPostWithHttpInfo(ospPolicy);
        }

        /// <summary>
        /// Create a new OSP entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OSPPostWithHttpInfo (OSPPrivacyPolicyInput ospPolicy)
        {
            // verify the required parameter 'ospPolicy' is set
            if (ospPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ospPolicy' when calling OSPApi->OSPPost");

            var localVarPath = "/OSP/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospPolicy != null && ospPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospPolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new OSP entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OSPPostAsync (OSPPrivacyPolicyInput ospPolicy)
        {
             await OSPPostAsyncWithHttpInfo(ospPolicy);

        }

        /// <summary>
        /// Create a new OSP entry in the database. Called by the policy computation component when a new regulation is added to OPERANDO. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospPolicy">The first instance of this OSP document</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OSPPostAsyncWithHttpInfo (OSPPrivacyPolicyInput ospPolicy)
        {
            // verify the required parameter 'ospPolicy' is set
            if (ospPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ospPolicy' when calling OSPApi->OSPPost");

            var localVarPath = "/OSP/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospPolicy != null && ospPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospPolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OSPPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * OSP Enforcement (OSE)
 *
 *  The OSP enforcement component provides a set of functions that manage the interaction of OSP behaviour with the user's private data. The OSE component is largely in charge of ensuring that an OSP follows both privacy regulations and policies put in place by the user (i.e. in the OPERANDO UPPs). There are a set of events that trigger the usage of this API.  1) When a new G2C OSP registers with OPERANDO via the OPERANDO console. The management console informs the OSE, which then checks that an OSP conforms with existing privacy regulations; if it breaches the regulations, the OSE returns via the management console a report describing the breaches.  2) When a change of OSP privacy policy or of the OSP's privacy settings are detected by the watchdog component. The watchdog component sends a message to a privacy analyst who reviews any changes. The privacy analyst may then inform the OSE of the new OSP information (to be checked for compliance with regulations and users' UPPs.  3) When a privacy legislation is entered (or changed) via the Regulator API. The OSE checks registered OSPs for compliance with the new regulations; where there is a breach the OSP is notified either by e-mail or the console. 
 *
 * OpenAPI spec version: 0.0.8
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace eu.operando.core.ose.cli.Model
{
    /// <summary>
    /// AccessPolicy
    /// </summary>
    [DataContract]
    public partial class AccessPolicy :  IEquatable<AccessPolicy>
    {
        /// <summary>
        /// The action being carried out on the private date e.g. accessing, disclosing to a third party.  
        /// </summary>
        /// <value>The action being carried out on the private date e.g. accessing, disclosing to a third party.  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Collect for "Collect"
            /// </summary>
            [EnumMember(Value = "Collect")]
            Collect,
            
            /// <summary>
            /// Enum Access for "Access"
            /// </summary>
            [EnumMember(Value = "Access")]
            Access,
            
            /// <summary>
            /// Enum Use for "Use"
            /// </summary>
            [EnumMember(Value = "Use")]
            Use,
            
            /// <summary>
            /// Enum Disclose for "Disclose"
            /// </summary>
            [EnumMember(Value = "Disclose")]
            Disclose,
            
            /// <summary>
            /// Enum Archive for "Archive"
            /// </summary>
            [EnumMember(Value = "Archive")]
            Archive
        }

        /// <summary>
        /// The action being carried out on the private date e.g. accessing, disclosing to a third party.  
        /// </summary>
        /// <value>The action being carried out on the private date e.g. accessing, disclosing to a third party.  </value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessPolicy" /> class.
        /// </summary>
        /// <param name="Subject">A description of the subject who the policies grants/doesn&#39;t grant to carry out. .</param>
        /// <param name="Permission">Grant or deny the subject access to the resource via the operation defined in this policy .</param>
        /// <param name="Action">The action being carried out on the private date e.g. accessing, disclosing to a third party.  .</param>
        /// <param name="Resource">The identifier of the resource that the policy concerns (e.g. URL) .</param>
        /// <param name="Attributes">The set of context attributes attached to the policy (e.g. subject role, subject purpose) .</param>
        public AccessPolicy(string Subject = null, bool? Permission = null, ActionEnum? Action = null, string Resource = null, List<PolicyAttribute> Attributes = null)
        {
            this.Subject = Subject;
            this.Permission = Permission;
            this.Action = Action;
            this.Resource = Resource;
            this.Attributes = Attributes;
        }
        
        /// <summary>
        /// A description of the subject who the policies grants/doesn&#39;t grant to carry out. 
        /// </summary>
        /// <value>A description of the subject who the policies grants/doesn&#39;t grant to carry out. </value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }
        /// <summary>
        /// Grant or deny the subject access to the resource via the operation defined in this policy 
        /// </summary>
        /// <value>Grant or deny the subject access to the resource via the operation defined in this policy </value>
        [DataMember(Name="permission", EmitDefaultValue=false)]
        public bool? Permission { get; set; }
        /// <summary>
        /// The identifier of the resource that the policy concerns (e.g. URL) 
        /// </summary>
        /// <value>The identifier of the resource that the policy concerns (e.g. URL) </value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }
        /// <summary>
        /// The set of context attributes attached to the policy (e.g. subject role, subject purpose) 
        /// </summary>
        /// <value>The set of context attributes attached to the policy (e.g. subject role, subject purpose) </value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<PolicyAttribute> Attributes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessPolicy {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccessPolicy);
        }

        /// <summary>
        /// Returns true if AccessPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessPolicy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.Permission == other.Permission ||
                    this.Permission != null &&
                    this.Permission.Equals(other.Permission)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Resource == other.Resource ||
                    this.Resource != null &&
                    this.Resource.Equals(other.Resource)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(other.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.Permission != null)
                    hash = hash * 59 + this.Permission.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Resource != null)
                    hash = hash * 59 + this.Resource.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                return hash;
            }
        }
    }

}

/* 
 * OSP Enforcement (OSE)
 *
 *  The OSP enforcement component provides a set of functions that manage the interaction of OSP behaviour with the user's private data. The OSE component is largely in charge of ensuring that an OSP follows both privacy regulations and policies put in place by the user (i.e. in the OPERANDO UPPs). There are a set of events that trigger the usage of this API.  1) When a new G2C OSP registers with OPERANDO via the OPERANDO console. The management console informs the OSE, which then checks that an OSP conforms with existing privacy regulations; if it breaches the regulations, the OSE returns via the management console a report describing the breaches.  2) When a change of OSP privacy policy or of the OSP's privacy settings are detected by the watchdog component. The watchdog component sends a message to a privacy analyst who reviews any changes. The privacy analyst may then inform the OSE of the new OSP information (to be checked for compliance with regulations and users' UPPs.  3) When a privacy legislation is entered (or changed) via the Regulator API. The OSE checks registered OSPs for compliance with the new regulations; where there is a breach the OSP is notified either by e-mail or the console. 
 *
 * OpenAPI spec version: 0.0.8
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using eu.operando.core.ose.cli.Client;
using eu.operando.core.ose.cli.Model;

namespace eu.operando.core.ose.cli.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrivacyPolicyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in policy text 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns></returns>
        void OspsOspIdPrivacytextPut (string ospId, string ospPrivacyText);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in policy text 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OspsOspIdPrivacytextPutWithHttpInfo (string ospId, string ospPrivacyText);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns></returns>
        void OspsOspIdPut (string ospId, OSPPrivacyPolicy ospPolicy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OspsOspIdPutWithHttpInfo (string ospId, OSPPrivacyPolicy ospPolicy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in an OSP&#39;s workflow 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns></returns>
        void OspsOspIdWorkflowsPut (string ospId, OSPDataRequest ospWorkflow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in an OSP&#39;s workflow 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OspsOspIdWorkflowsPutWithHttpInfo (string ospId, OSPDataRequest ospWorkflow);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in policy text 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OspsOspIdPrivacytextPutAsync (string ospId, string ospPrivacyText);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in policy text 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdPrivacytextPutAsyncWithHttpInfo (string ospId, string ospPrivacyText);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OspsOspIdPutAsync (string ospId, OSPPrivacyPolicy ospPolicy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdPutAsyncWithHttpInfo (string ospId, OSPPrivacyPolicy ospPolicy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in an OSP&#39;s workflow 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OspsOspIdWorkflowsPutAsync (string ospId, OSPDataRequest ospWorkflow);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify the OSE of a change in an OSP&#39;s workflow 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdWorkflowsPutAsyncWithHttpInfo (string ospId, OSPDataRequest ospWorkflow);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrivacyPolicyApi : IPrivacyPolicyApi
    {
        private eu.operando.core.ose.cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivacyPolicyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrivacyPolicyApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = eu.operando.core.ose.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivacyPolicyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrivacyPolicyApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eu.operando.core.ose.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eu.operando.core.ose.cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Notify the OSE of a change in policy text 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns></returns>
        public void OspsOspIdPrivacytextPut (string ospId, string ospPrivacyText)
        {
             OspsOspIdPrivacytextPutWithHttpInfo(ospId, ospPrivacyText);
        }

        /// <summary>
        ///  Notify the OSE of a change in policy text 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OspsOspIdPrivacytextPutWithHttpInfo (string ospId, string ospPrivacyText)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacyPolicyApi->OspsOspIdPrivacytextPut");
            // verify the required parameter 'ospPrivacyText' is set
            if (ospPrivacyText == null)
                throw new ApiException(400, "Missing required parameter 'ospPrivacyText' when calling PrivacyPolicyApi->OspsOspIdPrivacytextPut");

            var localVarPath = "/osps/{osp-id}/privacytext/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospPrivacyText != null) localVarQueryParams.Add("osp_privacy_text", Configuration.ApiClient.ParameterToString(ospPrivacyText)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPrivacytextPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Notify the OSE of a change in policy text 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OspsOspIdPrivacytextPutAsync (string ospId, string ospPrivacyText)
        {
             await OspsOspIdPrivacytextPutAsyncWithHttpInfo(ospId, ospPrivacyText);

        }

        /// <summary>
        ///  Notify the OSE of a change in policy text 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPrivacyText">The complete privacy policy text of the OSP.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdPrivacytextPutAsyncWithHttpInfo (string ospId, string ospPrivacyText)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacyPolicyApi->OspsOspIdPrivacytextPut");
            // verify the required parameter 'ospPrivacyText' is set
            if (ospPrivacyText == null)
                throw new ApiException(400, "Missing required parameter 'ospPrivacyText' when calling PrivacyPolicyApi->OspsOspIdPrivacytextPut");

            var localVarPath = "/osps/{osp-id}/privacytext/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospPrivacyText != null) localVarQueryParams.Add("osp_privacy_text", Configuration.ApiClient.ParameterToString(ospPrivacyText)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPrivacytextPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns></returns>
        public void OspsOspIdPut (string ospId, OSPPrivacyPolicy ospPolicy)
        {
             OspsOspIdPutWithHttpInfo(ospId, ospPolicy);
        }

        /// <summary>
        ///  Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OspsOspIdPutWithHttpInfo (string ospId, OSPPrivacyPolicy ospPolicy)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacyPolicyApi->OspsOspIdPut");
            // verify the required parameter 'ospPolicy' is set
            if (ospPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ospPolicy' when calling PrivacyPolicyApi->OspsOspIdPut");

            var localVarPath = "/osps/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospPolicy != null && ospPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospPolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OspsOspIdPutAsync (string ospId, OSPPrivacyPolicy ospPolicy)
        {
             await OspsOspIdPutAsyncWithHttpInfo(ospId, ospPolicy);

        }

        /// <summary>
        ///  Called when a change in an OSP&#39;s privacy policy detected by OPERANDO (or a new OSP is registered). OSE computes whether the OSP policy complies with regulations; complies with UPP. It updates UPPs where appropriate and notifies users and OSP if there are issues with the updated privacy policy.    Pre-condition - - The OSP must be registered with OPERANDO and it must have an existing policy stored in the policy DB.    
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospPolicy">The set of individual policies that have now compose the OSP&#39;s new privacy policy. This is the complete OSP list of the policies to be compared with the existing stored policy for this OSP.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdPutAsyncWithHttpInfo (string ospId, OSPPrivacyPolicy ospPolicy)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacyPolicyApi->OspsOspIdPut");
            // verify the required parameter 'ospPolicy' is set
            if (ospPolicy == null)
                throw new ApiException(400, "Missing required parameter 'ospPolicy' when calling PrivacyPolicyApi->OspsOspIdPut");

            var localVarPath = "/osps/{osp-id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospPolicy != null && ospPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospPolicy; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Notify the OSE of a change in an OSP&#39;s workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns></returns>
        public void OspsOspIdWorkflowsPut (string ospId, OSPDataRequest ospWorkflow)
        {
             OspsOspIdWorkflowsPutWithHttpInfo(ospId, ospWorkflow);
        }

        /// <summary>
        ///  Notify the OSE of a change in an OSP&#39;s workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OspsOspIdWorkflowsPutWithHttpInfo (string ospId, OSPDataRequest ospWorkflow)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacyPolicyApi->OspsOspIdWorkflowsPut");
            // verify the required parameter 'ospWorkflow' is set
            if (ospWorkflow == null)
                throw new ApiException(400, "Missing required parameter 'ospWorkflow' when calling PrivacyPolicyApi->OspsOspIdWorkflowsPut");

            var localVarPath = "/osps/{osp-id}/workflows/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospWorkflow != null && ospWorkflow.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospWorkflow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospWorkflow; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdWorkflowsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Notify the OSE of a change in an OSP&#39;s workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OspsOspIdWorkflowsPutAsync (string ospId, OSPDataRequest ospWorkflow)
        {
             await OspsOspIdWorkflowsPutAsyncWithHttpInfo(ospId, ospWorkflow);

        }

        /// <summary>
        ///  Notify the OSE of a change in an OSP&#39;s workflow 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="ospWorkflow">The workflow changes of the OSP.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OspsOspIdWorkflowsPutAsyncWithHttpInfo (string ospId, OSPDataRequest ospWorkflow)
        {
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling PrivacyPolicyApi->OspsOspIdWorkflowsPut");
            // verify the required parameter 'ospWorkflow' is set
            if (ospWorkflow == null)
                throw new ApiException(400, "Missing required parameter 'ospWorkflow' when calling PrivacyPolicyApi->OspsOspIdWorkflowsPut");

            var localVarPath = "/osps/{osp-id}/workflows/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (ospWorkflow != null && ospWorkflow.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ospWorkflow); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ospWorkflow; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OspsOspIdWorkflowsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

/* 
 * Policy DB
 *
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing POSTApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class POSTApiTests
    {
        private POSTApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new POSTApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of POSTApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' POSTApi
            //Assert.IsInstanceOfType(typeof(POSTApi), instance, "instance is a POSTApi");
        }

        
        /// <summary>
        /// Test OSPOspIdPrivacyPolicyAccessReasonsPost
        /// </summary>
        [Test]
        public void OSPOspIdPrivacyPolicyAccessReasonsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ospId = null;
            //AccessReason ospPolicy = null;
            //instance.OSPOspIdPrivacyPolicyAccessReasonsPost(ospId, ospPolicy);
            
        }
        
        /// <summary>
        /// Test OSPOspIdPrivacyPolicyAccessReasonsReasonIdPut
        /// </summary>
        [Test]
        public void OSPOspIdPrivacyPolicyAccessReasonsReasonIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ospId = null;
            //string reasonId = null;
            //AccessReason ospPolicy = null;
            //instance.OSPOspIdPrivacyPolicyAccessReasonsReasonIdPut(ospId, reasonId, ospPolicy);
            
        }
        
        /// <summary>
        /// Test OSPPost
        /// </summary>
        [Test]
        public void OSPPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OSPPrivacyPolicyInput ospPolicy = null;
            //var response = instance.OSPPost(ospPolicy);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test RegulationsPost
        /// </summary>
        [Test]
        public void RegulationsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PrivacyRegulationInput regulation = null;
            //var response = instance.RegulationsPost(regulation);
            //Assert.IsInstanceOf<PrivacyRegulation> (response, "response is PrivacyRegulation");
        }
        
        /// <summary>
        /// Test UserPrivacyPolicyPost
        /// </summary>
        [Test]
        public void UserPrivacyPolicyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserPrivacyPolicy upp = null;
            //var response = instance.UserPrivacyPolicyPost(upp);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}

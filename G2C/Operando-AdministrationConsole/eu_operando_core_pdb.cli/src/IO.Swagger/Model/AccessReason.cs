/* 
 * Policy DB
 *
 * The Policy Database that stores three types of documents in dedicated collections.   1) User Privacy Policy. Each OPERANDO user has one UPP document describing their privacy policies for each of the OSP services they are subscribed to. The UPP contains the current B2C privacy settings for a subscribed to OSP. The UPP contains the users privacy preferences. The UPP contains the G2C access policies for the OSP with justification for access.   2) The legislation policies. The regulations entered into OPERANDO using the OPERANDO regulation API.   3) The OSP descriptions and data requests. For each OSP its privacy policy, its access control rules, and the data it requests (as a workflow). For B2C, the set of privacy settings is stored. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace eu.operando.core.pdb.cli.Model
{
    /// <summary>
    /// AccessReason
    /// </summary>
    [DataContract]
    public partial class AccessReason :  IEquatable<AccessReason>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessReason" /> class.
        /// </summary>
        /// <param name="Reasonid">An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. .</param>
        /// <param name="Datauser">Who is using the data. .</param>
        /// <param name="Datasubjecttype">What is the type or group of the user this private data concerns e.g. patient, helper etc. .</param>
        /// <param name="Datatype">What is the type of data this refers to e.g. e-mail address, medical record etc. .</param>
        /// <param name="Reason">Usage of this information if for what purpose e.g. marketing, healthcare delivery. .</param>
        public AccessReason(string Reasonid = default(string), string Datauser = default(string), string Datasubjecttype = default(string), string Datatype = default(string), string Reason = default(string))
        {
            this.Reasonid = Reasonid;
            this.Datauser = Datauser;
            this.Datasubjecttype = Datasubjecttype;
            this.Datatype = Datatype;
            this.Reason = Reason;
        }
        public AccessReason() { }

        /// <summary>
        /// An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. 
        /// </summary>
        /// <value>An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. </value>
        [DataMember(Name="reasonid", EmitDefaultValue=false)]
        public string Reasonid { get; set; }
        /// <summary>
        /// Who is using the data. 
        /// </summary>
        /// <value>Who is using the data. </value>
        [DataMember(Name="datauser", EmitDefaultValue=false)]
        public string Datauser { get; set; }
        /// <summary>
        /// What is the type or group of the user this private data concerns e.g. patient, helper etc. 
        /// </summary>
        /// <value>What is the type or group of the user this private data concerns e.g. patient, helper etc. </value>
        [DataMember(Name="datasubjecttype", EmitDefaultValue=false)]
        public string Datasubjecttype { get; set; }
        /// <summary>
        /// What is the type of data this refers to e.g. e-mail address, medical record etc. 
        /// </summary>
        /// <value>What is the type of data this refers to e.g. e-mail address, medical record etc. </value>
        [DataMember(Name="datatype", EmitDefaultValue=false)]
        public string Datatype { get; set; }
        /// <summary>
        /// Usage of this information if for what purpose e.g. marketing, healthcare delivery. 
        /// </summary>
        /// <value>Usage of this information if for what purpose e.g. marketing, healthcare delivery. </value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessReason {\n");
            sb.Append("  Reasonid: ").Append(Reasonid).Append("\n");
            sb.Append("  Datauser: ").Append(Datauser).Append("\n");
            sb.Append("  Datasubjecttype: ").Append(Datasubjecttype).Append("\n");
            sb.Append("  Datatype: ").Append(Datatype).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccessReason);
        }

        /// <summary>
        /// Returns true if AccessReason instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessReason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessReason other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Reasonid == other.Reasonid ||
                    this.Reasonid != null &&
                    this.Reasonid.Equals(other.Reasonid)
                ) && 
                (
                    this.Datauser == other.Datauser ||
                    this.Datauser != null &&
                    this.Datauser.Equals(other.Datauser)
                ) && 
                (
                    this.Datasubjecttype == other.Datasubjecttype ||
                    this.Datasubjecttype != null &&
                    this.Datasubjecttype.Equals(other.Datasubjecttype)
                ) && 
                (
                    this.Datatype == other.Datatype ||
                    this.Datatype != null &&
                    this.Datatype.Equals(other.Datatype)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Reasonid != null)
                    hash = hash * 59 + this.Reasonid.GetHashCode();
                if (this.Datauser != null)
                    hash = hash * 59 + this.Datauser.GetHashCode();
                if (this.Datasubjecttype != null)
                    hash = hash * 59 + this.Datasubjecttype.GetHashCode();
                if (this.Datatype != null)
                    hash = hash * 59 + this.Datatype.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}

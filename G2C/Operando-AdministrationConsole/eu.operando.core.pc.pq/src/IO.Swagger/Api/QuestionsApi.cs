/* 
 * Privacy Questionairre API
 *
 * A set of methods to manage privacy quesions.   Privacy questions are generated to form a questionairre that can be displayed to the user. The answers to these questions form a privacy sensitivity index.  For an individual service (OSP) a set of questions can be generated  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using eu.operando.core.pc.pq.Client;
using eu.operando.core.pc.pq.Model;

namespace eu.operando.core.pc.pq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>List&lt;Questionobject&gt;</returns>
        List<Questionobject> QuestionsUserIdOspIdGet (string userId, string ospId, string language);

        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>ApiResponse of List&lt;Questionobject&gt;</returns>
        ApiResponse<List<Questionobject>> QuestionsUserIdOspIdGetWithHttpInfo (string userId, string ospId, string language);
        /// <summary>
        /// Enter the answers to the questionnaire.
        /// </summary>
        /// <remarks>
        /// Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>List&lt;Answerobject&gt;</returns>
        List<Answerobject> QuestionsUserIdOspIdPost (string userId, List<Questionobject> upp);

        /// <summary>
        /// Enter the answers to the questionnaire.
        /// </summary>
        /// <remarks>
        /// Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>ApiResponse of List&lt;Answerobject&gt;</returns>
        ApiResponse<List<Answerobject>> QuestionsUserIdOspIdPostWithHttpInfo (string userId, List<Questionobject> upp);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>Task of List&lt;Questionobject&gt;</returns>
        System.Threading.Tasks.Task<List<Questionobject>> QuestionsUserIdOspIdGetAsync (string userId, string ospId, string language);

        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP.
        /// </summary>
        /// <remarks>
        /// The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>Task of ApiResponse (List&lt;Questionobject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Questionobject>>> QuestionsUserIdOspIdGetAsyncWithHttpInfo (string userId, string ospId, string language);
        /// <summary>
        /// Enter the answers to the questionnaire.
        /// </summary>
        /// <remarks>
        /// Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>Task of List&lt;Answerobject&gt;</returns>
        System.Threading.Tasks.Task<List<Answerobject>> QuestionsUserIdOspIdPostAsync (string userId, List<Questionobject> upp);

        /// <summary>
        /// Enter the answers to the questionnaire.
        /// </summary>
        /// <remarks>
        /// Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>Task of ApiResponse (List&lt;Answerobject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Answerobject>>> QuestionsUserIdOspIdPostAsyncWithHttpInfo (string userId, List<Questionobject> upp);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuestionsApi : IQuestionsApi
    {
        private eu.operando.core.pc.pq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = eu.operando.core.pc.pq.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuestionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eu.operando.core.pc.pq.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eu.operando.core.pc.pq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP. The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>List&lt;Questionobject&gt;</returns>
        public List<Questionobject> QuestionsUserIdOspIdGet (string userId, string ospId, string language)
        {
             ApiResponse<List<Questionobject>> localVarResponse = QuestionsUserIdOspIdGetWithHttpInfo(userId, ospId, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP. The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>ApiResponse of List&lt;Questionobject&gt;</returns>
        public ApiResponse< List<Questionobject> > QuestionsUserIdOspIdGetWithHttpInfo (string userId, string ospId, string language)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling QuestionsApi->QuestionsUserIdOspIdGet");
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling QuestionsApi->QuestionsUserIdOspIdGet");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling QuestionsApi->QuestionsUserIdOspIdGet");

            var localVarPath = "/questions/{user-id}/{osp-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuestionsUserIdOspIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Questionobject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Questionobject>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Questionobject>)));
        }

        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP. The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>Task of List&lt;Questionobject&gt;</returns>
        public async System.Threading.Tasks.Task<List<Questionobject>> QuestionsUserIdOspIdGetAsync (string userId, string ospId, string language)
        {
             ApiResponse<List<Questionobject>> localVarResponse = await QuestionsUserIdOspIdGetAsyncWithHttpInfo(userId, ospId, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain a set of 9 questions related to privacy and the specified OSP. The query contains a json object (names, values) and the request returns the list of documents (UPPs) where the filter matches i.e. each document contains fields with those values. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="ospId">The identifier number of an OSP</param>
        /// <param name="language">The language for the question (EN, IT, FR etc.)</param>
        /// <returns>Task of ApiResponse (List&lt;Questionobject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Questionobject>>> QuestionsUserIdOspIdGetAsyncWithHttpInfo (string userId, string ospId, string language)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling QuestionsApi->QuestionsUserIdOspIdGet");
            // verify the required parameter 'ospId' is set
            if (ospId == null)
                throw new ApiException(400, "Missing required parameter 'ospId' when calling QuestionsApi->QuestionsUserIdOspIdGet");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling QuestionsApi->QuestionsUserIdOspIdGet");

            var localVarPath = "/questions/{user-id}/{osp-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (ospId != null) localVarPathParams.Add("osp-id", Configuration.ApiClient.ParameterToString(ospId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuestionsUserIdOspIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Questionobject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Questionobject>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Questionobject>)));
        }

        /// <summary>
        /// Enter the answers to the questionnaire. Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>List&lt;Answerobject&gt;</returns>
        public List<Answerobject> QuestionsUserIdOspIdPost (string userId, List<Questionobject> upp)
        {
             ApiResponse<List<Answerobject>> localVarResponse = QuestionsUserIdOspIdPostWithHttpInfo(userId, upp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enter the answers to the questionnaire. Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>ApiResponse of List&lt;Answerobject&gt;</returns>
        public ApiResponse< List<Answerobject> > QuestionsUserIdOspIdPostWithHttpInfo (string userId, List<Questionobject> upp)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling QuestionsApi->QuestionsUserIdOspIdPost");
            // verify the required parameter 'upp' is set
            if (upp == null)
                throw new ApiException(400, "Missing required parameter 'upp' when calling QuestionsApi->QuestionsUserIdOspIdPost");

            var localVarPath = "/questions/{user-id}/{osp-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (upp != null && upp.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(upp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upp; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuestionsUserIdOspIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Answerobject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Answerobject>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Answerobject>)));
        }

        /// <summary>
        /// Enter the answers to the questionnaire. Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>Task of List&lt;Answerobject&gt;</returns>
        public async System.Threading.Tasks.Task<List<Answerobject>> QuestionsUserIdOspIdPostAsync (string userId, List<Questionobject> upp)
        {
             ApiResponse<List<Answerobject>> localVarResponse = await QuestionsUserIdOspIdPostAsyncWithHttpInfo(userId, upp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enter the answers to the questionnaire. Once the questions have been answered by the user they are pushed to be  processed and the user preferences calculated and stored in the UPP. 
        /// </summary>
        /// <exception cref="eu.operando.core.pc.pq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user identifier number</param>
        /// <param name="upp">The answers to the questions</param>
        /// <returns>Task of ApiResponse (List&lt;Answerobject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Answerobject>>> QuestionsUserIdOspIdPostAsyncWithHttpInfo (string userId, List<Questionobject> upp)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling QuestionsApi->QuestionsUserIdOspIdPost");
            // verify the required parameter 'upp' is set
            if (upp == null)
                throw new ApiException(400, "Missing required parameter 'upp' when calling QuestionsApi->QuestionsUserIdOspIdPost");

            var localVarPath = "/questions/{user-id}/{osp-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (upp != null && upp.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(upp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upp; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuestionsUserIdOspIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Answerobject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Answerobject>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Answerobject>)));
        }

    }
}

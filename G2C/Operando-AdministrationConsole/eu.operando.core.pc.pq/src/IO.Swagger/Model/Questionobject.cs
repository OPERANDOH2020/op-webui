/* 
 * Privacy Questionairre API
 *
 * A set of methods to manage privacy quesions.   Privacy questions are generated to form a questionairre that can be displayed to the user. The answers to these questions form a privacy sensitivity index.  For an individual service (OSP) a set of questions can be generated  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = eu.operando.core.pc.pq.Client.SwaggerDateConverter;

namespace eu.operando.core.pc.pq.Model
{
    /// <summary>
    /// Questionobject
    /// </summary>
    [DataContract]
    public partial class Questionobject :  IEquatable<Questionobject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Questionobject" /> class.
        /// </summary>
        /// <param name="Question">The text to display to the user for this question.  .</param>
        /// <param name="Category">The type of data this question refers to - general, medical, OSP, etc. .</param>
        /// <param name="Meta">Additional helper (tooltip) information to display to the user.  .</param>
        /// <param name="Weight">The importance of this question to an overal ranking 0..1 with 1 the greatest importance.  .</param>
        /// <param name="Score">The score field to be entered by the user.  .</param>
        public Questionobject(string Question = default(string), string Category = default(string), string Meta = default(string), string Weight = default(string), string Score = default(string))
        {
            this.Question = Question;
            this.Category = Category;
            this.Meta = Meta;
            this.Weight = Weight;
            this.Score = Score;
        }
        
        /// <summary>
        /// The text to display to the user for this question.  
        /// </summary>
        /// <value>The text to display to the user for this question.  </value>
        [DataMember(Name="question", EmitDefaultValue=false)]
        public string Question { get; set; }

        /// <summary>
        /// The type of data this question refers to - general, medical, OSP, etc. 
        /// </summary>
        /// <value>The type of data this question refers to - general, medical, OSP, etc. </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Additional helper (tooltip) information to display to the user.  
        /// </summary>
        /// <value>Additional helper (tooltip) information to display to the user.  </value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public string Meta { get; set; }

        /// <summary>
        /// The importance of this question to an overal ranking 0..1 with 1 the greatest importance.  
        /// </summary>
        /// <value>The importance of this question to an overal ranking 0..1 with 1 the greatest importance.  </value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// The score field to be entered by the user.  
        /// </summary>
        /// <value>The score field to be entered by the user.  </value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public string Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Questionobject {\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Questionobject);
        }

        /// <summary>
        /// Returns true if Questionobject instances are equal
        /// </summary>
        /// <param name="other">Instance of Questionobject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Questionobject other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Question == other.Question ||
                    this.Question != null &&
                    this.Question.Equals(other.Question)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Meta == other.Meta ||
                    this.Meta != null &&
                    this.Meta.Equals(other.Meta)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Question != null)
                    hash = hash * 59 + this.Question.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Meta != null)
                    hash = hash * 59 + this.Meta.GetHashCode();
                if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

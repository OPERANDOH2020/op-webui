/* 
 * Privacy Questionairre API
 *
 * A set of methods to manage privacy quesions.   Privacy questions are generated to form a questionairre that can be displayed to the user. The answers to these questions form a privacy sensitivity index.  For an individual service (OSP) a set of questions can be generated  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = eu.operando.core.pc.pq.Client.SwaggerDateConverter;

namespace eu.operando.core.pc.pq.Model
{
    /// <summary>
    /// Answerobject
    /// </summary>
    [DataContract]
    public partial class Answerobject :  IEquatable<Answerobject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Answerobject" /> class.
        /// </summary>
        /// <param name="Category">The data category this relates to  .</param>
        /// <param name="Score">The result between 1 and 4 (strongly disagree, disagree, agree, strongly agree) .</param>
        /// <param name="Roles">The role of the person this relates to  .</param>
        /// <param name="Action">The importance of this question to an overal ranking 0..1 with 1 the greatest importance.          .</param>
        public Answerobject(string Category = default(string), string Score = default(string), string Roles = default(string), string Action = default(string))
        {
            this.Category = Category;
            this.Score = Score;
            this.Roles = Roles;
            this.Action = Action;
        }
        
        /// <summary>
        /// The data category this relates to  
        /// </summary>
        /// <value>The data category this relates to  </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// The result between 1 and 4 (strongly disagree, disagree, agree, strongly agree) 
        /// </summary>
        /// <value>The result between 1 and 4 (strongly disagree, disagree, agree, strongly agree) </value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public string Score { get; set; }

        /// <summary>
        /// The role of the person this relates to  
        /// </summary>
        /// <value>The role of the person this relates to  </value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public string Roles { get; set; }

        /// <summary>
        /// The importance of this question to an overal ranking 0..1 with 1 the greatest importance.          
        /// </summary>
        /// <value>The importance of this question to an overal ranking 0..1 with 1 the greatest importance.          </value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Answerobject {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Answerobject);
        }

        /// <summary>
        /// Returns true if Answerobject instances are equal
        /// </summary>
        /// <param name="other">Instance of Answerobject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Answerobject other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.Equals(other.Roles)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

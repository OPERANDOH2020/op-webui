/* 
 * Regulator API
 *
 * API specification for OPERANDO's Regulator API
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace eu.operando.interfaces.rapi.Model
{
    /// <summary>
    /// OSPReasonPolicy
    /// </summary>
    [DataContract]
    public partial class OSPReasonPolicy :  IEquatable<OSPReasonPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OSPReasonPolicy" /> class.
        /// </summary>
        /// <param name="OspPolicyId">OspPolicyId.</param>
        /// <param name="Policies">The list of access reasons to use a particular data subject types data .</param>
        public OSPReasonPolicy(string OspPolicyId = default(string), List<AccessReason> Policies = default(List<AccessReason>))
        {
            this.OspPolicyId = OspPolicyId;
            this.Policies = Policies;
        }
        
        /// <summary>
        /// Gets or Sets OspPolicyId
        /// </summary>
        [DataMember(Name="osp_policy_id", EmitDefaultValue=false)]
        public string OspPolicyId { get; set; }
        /// <summary>
        /// The list of access reasons to use a particular data subject types data 
        /// </summary>
        /// <value>The list of access reasons to use a particular data subject types data </value>
        [DataMember(Name="policies", EmitDefaultValue=false)]
        public List<AccessReason> Policies { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OSPReasonPolicy {\n");
            sb.Append("  OspPolicyId: ").Append(OspPolicyId).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OSPReasonPolicy);
        }

        /// <summary>
        /// Returns true if OSPReasonPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of OSPReasonPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OSPReasonPolicy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OspPolicyId == other.OspPolicyId ||
                    this.OspPolicyId != null &&
                    this.OspPolicyId.Equals(other.OspPolicyId)
                ) && 
                (
                    this.Policies == other.Policies ||
                    this.Policies != null &&
                    this.Policies.SequenceEqual(other.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OspPolicyId != null)
                    hash = hash * 59 + this.OspPolicyId.GetHashCode();
                if (this.Policies != null)
                    hash = hash * 59 + this.Policies.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}

/* 
 * Regulator API
 *
 * API specification for OPERANDO's Regulator API
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace eu.operando.interfaces.rapi.Model
{
    /// <summary>
    /// AccessReason
    /// </summary>
    [DataContract]
    public partial class AccessReason :  IEquatable<AccessReason>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessReason" /> class.
        /// </summary>
        /// <param name="Reasonid">An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. .</param>
        /// <param name="dataUser">Who is using the data. .</param>
        /// <param name="dataSubjectType">What is the type or group of the user this private data concerns e.g. patient, helper etc. .</param>
        /// <param name="dataType">What is the type of data this refers to e.g. e-mail address, medical record etc. .</param>
        /// <param name="Reason">Usage of this information if for what purpose e.g. marketing, healthcare delivery. .</param>
        public AccessReason(string Reasonid = default(string), string dataUser = default(string), string dataSubjectType = default(string), string dataType = default(string), string Reason = default(string))
        {
            this.Reasonid = Reasonid;
            this.DataUser = dataUser;
            this.DataSubjectType = dataSubjectType;
            this.DataType = dataType;
            this.Reason = Reason;
        }
        
        /// <summary>
        /// An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. 
        /// </summary>
        /// <value>An identifier within this privacy policy e.g osp_reason1. This is not globally unique and is defined by the OSP. However, OSP must ensure that  identifiers are unique within the policy list. </value>
        [DataMember(Name="reasonid", EmitDefaultValue=false)]
        public string Reasonid { get; set; }
        /// <summary>
        /// Who is using the data. 
        /// </summary>
        /// <value>Who is using the data. </value>
        [DataMember(Name="datauser", EmitDefaultValue=false)]
        public string DataUser { get; set; }
        /// <summary>
        /// What is the type or group of the user this private data concerns e.g. patient, helper etc. 
        /// </summary>
        /// <value>What is the type or group of the user this private data concerns e.g. patient, helper etc. </value>
        [DataMember(Name="datasubjecttype", EmitDefaultValue=false)]
        public string DataSubjectType { get; set; }
        /// <summary>
        /// What is the type of data this refers to e.g. e-mail address, medical record etc. 
        /// </summary>
        /// <value>What is the type of data this refers to e.g. e-mail address, medical record etc. </value>
        [DataMember(Name="datatype", EmitDefaultValue=false)]
        public string DataType { get; set; }
        /// <summary>
        /// Usage of this information if for what purpose e.g. marketing, healthcare delivery. 
        /// </summary>
        /// <value>Usage of this information if for what purpose e.g. marketing, healthcare delivery. </value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessReason {\n");
            sb.Append("  Reasonid: ").Append(Reasonid).Append("\n");
            sb.Append("  Datauser: ").Append(DataUser).Append("\n");
            sb.Append("  Datasubjecttype: ").Append(DataSubjectType).Append("\n");
            sb.Append("  Datatype: ").Append(DataType).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccessReason);
        }

        /// <summary>
        /// Returns true if AccessReason instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessReason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessReason other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Reasonid == other.Reasonid ||
                    this.Reasonid != null &&
                    this.Reasonid.Equals(other.Reasonid)
                ) && 
                (
                    this.DataUser == other.DataUser ||
                    this.DataUser != null &&
                    this.DataUser.Equals(other.DataUser)
                ) && 
                (
                    this.DataSubjectType == other.DataSubjectType ||
                    this.DataSubjectType != null &&
                    this.DataSubjectType.Equals(other.DataSubjectType)
                ) && 
                (
                    this.DataType == other.DataType ||
                    this.DataType != null &&
                    this.DataType.Equals(other.DataType)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Reasonid != null)
                    hash = hash * 59 + this.Reasonid.GetHashCode();
                if (this.DataUser != null)
                    hash = hash * 59 + this.DataUser.GetHashCode();
                if (this.DataSubjectType != null)
                    hash = hash * 59 + this.DataSubjectType.GetHashCode();
                if (this.DataType != null)
                    hash = hash * 59 + this.DataType.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}

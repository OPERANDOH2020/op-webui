/* 
 * REST API for CPCU Operando
 *
 * A REST API to access and edit Questionnaires and Services within the CPCU platform
 *
 * OpenAPI spec version: 2.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using eu.operando.core.cpcu.cli.Client;
using eu.operando.core.cpcu.cli.Model;

namespace eu.operando.core.cpcu.cli.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMainapicontrollerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a Question
        /// </summary>
        /// <remarks>
        ///  Adds a new Question to a specfic Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Object</returns>
        Object AddQuestionUsingPOST (string questionnaireID, QuestionConfiguration qc);

        /// <summary>
        /// Adds a Question
        /// </summary>
        /// <remarks>
        ///  Adds a new Question to a specfic Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddQuestionUsingPOSTWithHttpInfo (string questionnaireID, QuestionConfiguration qc);
        /// <summary>
        /// Creates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Object</returns>
        Object CreateQuestionnaireUsingPOST (QuestionnaireConfiguration qc);

        /// <summary>
        /// Creates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateQuestionnaireUsingPOSTWithHttpInfo (QuestionnaireConfiguration qc);
        /// <summary>
        /// Creates a Service
        /// </summary>
        /// <remarks>
        /// Creates a new Service and adds it to the accessible Services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>Object</returns>
        Object CreateServiceUsingPOST (ServiceConfiguration sc);

        /// <summary>
        /// Creates a Service
        /// </summary>
        /// <remarks>
        /// Creates a new Service and adds it to the accessible Services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateServiceUsingPOSTWithHttpInfo (ServiceConfiguration sc);
        /// <summary>
        /// Deletes a Question
        /// </summary>
        /// <remarks>
        /// Deletes a specific Question within a Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>Object</returns>
        Object DeleteQuestionUsingDELETE (string questionnaireID, string questionID);

        /// <summary>
        /// Deletes a Question
        /// </summary>
        /// <remarks>
        /// Deletes a specific Question within a Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteQuestionUsingDELETEWithHttpInfo (string questionnaireID, string questionID);
        /// <summary>
        /// Deletes a Questionnaire
        /// </summary>
        /// <remarks>
        /// Deletes a specific Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>Object</returns>
        Object DeleteQuestionnaireUsingDELETE (int? questionnaireID);

        /// <summary>
        /// Deletes a Questionnaire
        /// </summary>
        /// <remarks>
        /// Deletes a specific Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteQuestionnaireUsingDELETEWithHttpInfo (int? questionnaireID);
        /// <summary>
        /// Deletes a Service
        /// </summary>
        /// <remarks>
        /// Deletes a specific service from the accessible services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>Object</returns>
        Object DeleteServiceUsingDELETE (int? serviceID);

        /// <summary>
        /// Deletes a Service
        /// </summary>
        /// <remarks>
        /// Deletes a specific service from the accessible services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteServiceUsingDELETEWithHttpInfo (int? serviceID);
        /// <summary>
        /// Retrieves a Question pool
        /// </summary>
        /// <remarks>
        /// Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>List&lt;QuestionConfiguration&gt;</returns>
        List<QuestionConfiguration> GetQuestionPoolUsingGET (int? questionnaireID);

        /// <summary>
        /// Retrieves a Question pool
        /// </summary>
        /// <remarks>
        /// Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>ApiResponse of List&lt;QuestionConfiguration&gt;</returns>
        ApiResponse<List<QuestionConfiguration>> GetQuestionPoolUsingGETWithHttpInfo (int? questionnaireID);
        /// <summary>
        /// Reads Questionnaires
        /// </summary>
        /// <remarks>
        /// Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>List&lt;QuestionnaireConfiguration&gt;</returns>
        List<QuestionnaireConfiguration> GetQuestionnairesUsingGET (string search = null, string field = null);

        /// <summary>
        /// Reads Questionnaires
        /// </summary>
        /// <remarks>
        /// Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>ApiResponse of List&lt;QuestionnaireConfiguration&gt;</returns>
        ApiResponse<List<QuestionnaireConfiguration>> GetQuestionnairesUsingGETWithHttpInfo (string search = null, string field = null);
        /// <summary>
        /// getQuestionpl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;QuestionConfiguration&gt;</returns>
        List<QuestionConfiguration> GetQuestionplUsingGET ();

        /// <summary>
        /// getQuestionpl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;QuestionConfiguration&gt;</returns>
        ApiResponse<List<QuestionConfiguration>> GetQuestionplUsingGETWithHttpInfo ();
        /// <summary>
        /// Read Services
        /// </summary>
        /// <remarks>
        /// Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>List&lt;ServiceConfiguration&gt;</returns>
        List<ServiceConfiguration> GetServicesUsingGET (string search = null, string field = null);

        /// <summary>
        /// Read Services
        /// </summary>
        /// <remarks>
        /// Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceConfiguration&gt;</returns>
        ApiResponse<List<ServiceConfiguration>> GetServicesUsingGETWithHttpInfo (string search = null, string field = null);
        /// <summary>
        /// Reads a specific Questionnaire
        /// </summary>
        /// <remarks>
        /// Gets a specific Questionnaire as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>List&lt;QuestionnaireConfiguration&gt;</returns>
        List<QuestionnaireConfiguration> GetSpecificQuestionnaireUsingGET (int? questionnaireID);

        /// <summary>
        /// Reads a specific Questionnaire
        /// </summary>
        /// <remarks>
        /// Gets a specific Questionnaire as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>ApiResponse of List&lt;QuestionnaireConfiguration&gt;</returns>
        ApiResponse<List<QuestionnaireConfiguration>> GetSpecificQuestionnaireUsingGETWithHttpInfo (int? questionnaireID);
        /// <summary>
        /// Reads a specific Service
        /// </summary>
        /// <remarks>
        /// Gets a specific Service as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>List&lt;ServiceConfiguration&gt;</returns>
        List<ServiceConfiguration> GetSpecificServiceUsingGET (int? serviceID);

        /// <summary>
        /// Reads a specific Service
        /// </summary>
        /// <remarks>
        /// Gets a specific Service as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>ApiResponse of List&lt;ServiceConfiguration&gt;</returns>
        ApiResponse<List<ServiceConfiguration>> GetSpecificServiceUsingGETWithHttpInfo (int? serviceID);
        /// <summary>
        /// Reload
        /// </summary>
        /// <remarks>
        /// Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object ReloadAppUsingGET ();

        /// <summary>
        /// Reload
        /// </summary>
        /// <remarks>
        /// Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReloadAppUsingGETWithHttpInfo ();
        /// <summary>
        /// Display the Admin Panel
        /// </summary>
        /// <remarks>
        /// This displays a UI in which the Questionnaires and Questions can be altered
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ShowPageUsingGET ();

        /// <summary>
        /// Display the Admin Panel
        /// </summary>
        /// <remarks>
        /// This displays a UI in which the Questionnaires and Questions can be altered
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ShowPageUsingGETWithHttpInfo ();
        /// <summary>
        /// Updates a Question
        /// </summary>
        /// <remarks>
        /// Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Object</returns>
        Object UpdateQuestionUsingPOST (string questionnaireID, string questionID, QuestionConfiguration qc);

        /// <summary>
        /// Updates a Question
        /// </summary>
        /// <remarks>
        /// Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateQuestionUsingPOSTWithHttpInfo (string questionnaireID, string questionID, QuestionConfiguration qc);
        /// <summary>
        /// Updates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>Object</returns>
        Object UpdateQuestionniareUsingPOST (QuestionnaireConfiguration qc, int? questionnaireID);

        /// <summary>
        /// Updates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateQuestionniareUsingPOSTWithHttpInfo (QuestionnaireConfiguration qc, int? questionnaireID);
        /// <summary>
        /// Updates a Service
        /// </summary>
        /// <remarks>
        /// Updates a specific service with the data submitted to this operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>Object</returns>
        Object UpdateServiceUsingPOST (ServiceConfiguration sc, int? serviceID);

        /// <summary>
        /// Updates a Service
        /// </summary>
        /// <remarks>
        /// Updates a specific service with the data submitted to this operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateServiceUsingPOSTWithHttpInfo (ServiceConfiguration sc, int? serviceID);
        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>Object</returns>
        Object ValidateQuestionIDUsingGET (int? questionnaireID, int? validateID);

        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ValidateQuestionIDUsingGETWithHttpInfo (int? questionnaireID, int? validateID);
        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>Object</returns>
        Object ValidateQuestionnaireIDUsingGET (int? validateID);

        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ValidateQuestionnaireIDUsingGETWithHttpInfo (int? validateID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a Question
        /// </summary>
        /// <remarks>
        ///  Adds a new Question to a specfic Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddQuestionUsingPOSTAsync (string questionnaireID, QuestionConfiguration qc);

        /// <summary>
        /// Adds a Question
        /// </summary>
        /// <remarks>
        ///  Adds a new Question to a specfic Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddQuestionUsingPOSTAsyncWithHttpInfo (string questionnaireID, QuestionConfiguration qc);
        /// <summary>
        /// Creates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateQuestionnaireUsingPOSTAsync (QuestionnaireConfiguration qc);

        /// <summary>
        /// Creates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateQuestionnaireUsingPOSTAsyncWithHttpInfo (QuestionnaireConfiguration qc);
        /// <summary>
        /// Creates a Service
        /// </summary>
        /// <remarks>
        /// Creates a new Service and adds it to the accessible Services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateServiceUsingPOSTAsync (ServiceConfiguration sc);

        /// <summary>
        /// Creates a Service
        /// </summary>
        /// <remarks>
        /// Creates a new Service and adds it to the accessible Services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceUsingPOSTAsyncWithHttpInfo (ServiceConfiguration sc);
        /// <summary>
        /// Deletes a Question
        /// </summary>
        /// <remarks>
        /// Deletes a specific Question within a Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteQuestionUsingDELETEAsync (string questionnaireID, string questionID);

        /// <summary>
        /// Deletes a Question
        /// </summary>
        /// <remarks>
        /// Deletes a specific Question within a Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionUsingDELETEAsyncWithHttpInfo (string questionnaireID, string questionID);
        /// <summary>
        /// Deletes a Questionnaire
        /// </summary>
        /// <remarks>
        /// Deletes a specific Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteQuestionnaireUsingDELETEAsync (int? questionnaireID);

        /// <summary>
        /// Deletes a Questionnaire
        /// </summary>
        /// <remarks>
        /// Deletes a specific Questionnaire
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionnaireUsingDELETEAsyncWithHttpInfo (int? questionnaireID);
        /// <summary>
        /// Deletes a Service
        /// </summary>
        /// <remarks>
        /// Deletes a specific service from the accessible services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteServiceUsingDELETEAsync (int? serviceID);

        /// <summary>
        /// Deletes a Service
        /// </summary>
        /// <remarks>
        /// Deletes a specific service from the accessible services
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceUsingDELETEAsyncWithHttpInfo (int? serviceID);
        /// <summary>
        /// Retrieves a Question pool
        /// </summary>
        /// <remarks>
        /// Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of List&lt;QuestionConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionConfiguration>> GetQuestionPoolUsingGETAsync (int? questionnaireID);

        /// <summary>
        /// Retrieves a Question pool
        /// </summary>
        /// <remarks>
        /// Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionConfiguration>>> GetQuestionPoolUsingGETAsyncWithHttpInfo (int? questionnaireID);
        /// <summary>
        /// Reads Questionnaires
        /// </summary>
        /// <remarks>
        /// Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>Task of List&lt;QuestionnaireConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionnaireConfiguration>> GetQuestionnairesUsingGETAsync (string search = null, string field = null);

        /// <summary>
        /// Reads Questionnaires
        /// </summary>
        /// <remarks>
        /// Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionnaireConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionnaireConfiguration>>> GetQuestionnairesUsingGETAsyncWithHttpInfo (string search = null, string field = null);
        /// <summary>
        /// getQuestionpl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;QuestionConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionConfiguration>> GetQuestionplUsingGETAsync ();

        /// <summary>
        /// getQuestionpl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;QuestionConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionConfiguration>>> GetQuestionplUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Read Services
        /// </summary>
        /// <remarks>
        /// Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>Task of List&lt;ServiceConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceConfiguration>> GetServicesUsingGETAsync (string search = null, string field = null);

        /// <summary>
        /// Read Services
        /// </summary>
        /// <remarks>
        /// Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceConfiguration>>> GetServicesUsingGETAsyncWithHttpInfo (string search = null, string field = null);
        /// <summary>
        /// Reads a specific Questionnaire
        /// </summary>
        /// <remarks>
        /// Gets a specific Questionnaire as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of List&lt;QuestionnaireConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionnaireConfiguration>> GetSpecificQuestionnaireUsingGETAsync (int? questionnaireID);

        /// <summary>
        /// Reads a specific Questionnaire
        /// </summary>
        /// <remarks>
        /// Gets a specific Questionnaire as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionnaireConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionnaireConfiguration>>> GetSpecificQuestionnaireUsingGETAsyncWithHttpInfo (int? questionnaireID);
        /// <summary>
        /// Reads a specific Service
        /// </summary>
        /// <remarks>
        /// Gets a specific Service as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>Task of List&lt;ServiceConfiguration&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceConfiguration>> GetSpecificServiceUsingGETAsync (int? serviceID);

        /// <summary>
        /// Reads a specific Service
        /// </summary>
        /// <remarks>
        /// Gets a specific Service as a JSON String
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceConfiguration&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceConfiguration>>> GetSpecificServiceUsingGETAsyncWithHttpInfo (int? serviceID);
        /// <summary>
        /// Reload
        /// </summary>
        /// <remarks>
        /// Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReloadAppUsingGETAsync ();

        /// <summary>
        /// Reload
        /// </summary>
        /// <remarks>
        /// Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReloadAppUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Display the Admin Panel
        /// </summary>
        /// <remarks>
        /// This displays a UI in which the Questionnaires and Questions can be altered
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ShowPageUsingGETAsync ();

        /// <summary>
        /// Display the Admin Panel
        /// </summary>
        /// <remarks>
        /// This displays a UI in which the Questionnaires and Questions can be altered
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ShowPageUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Updates a Question
        /// </summary>
        /// <remarks>
        /// Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateQuestionUsingPOSTAsync (string questionnaireID, string questionID, QuestionConfiguration qc);

        /// <summary>
        /// Updates a Question
        /// </summary>
        /// <remarks>
        /// Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuestionUsingPOSTAsyncWithHttpInfo (string questionnaireID, string questionID, QuestionConfiguration qc);
        /// <summary>
        /// Updates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateQuestionniareUsingPOSTAsync (QuestionnaireConfiguration qc, int? questionnaireID);

        /// <summary>
        /// Updates a Questionnaire
        /// </summary>
        /// <remarks>
        /// Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuestionniareUsingPOSTAsyncWithHttpInfo (QuestionnaireConfiguration qc, int? questionnaireID);
        /// <summary>
        /// Updates a Service
        /// </summary>
        /// <remarks>
        /// Updates a specific service with the data submitted to this operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateServiceUsingPOSTAsync (ServiceConfiguration sc, int? serviceID);

        /// <summary>
        /// Updates a Service
        /// </summary>
        /// <remarks>
        /// Updates a specific service with the data submitted to this operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceUsingPOSTAsyncWithHttpInfo (ServiceConfiguration sc, int? serviceID);
        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ValidateQuestionIDUsingGETAsync (int? questionnaireID, int? validateID);

        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateQuestionIDUsingGETAsyncWithHttpInfo (int? questionnaireID, int? validateID);
        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ValidateQuestionnaireIDUsingGETAsync (int? validateID);

        /// <summary>
        /// Verifies an ID is valid
        /// </summary>
        /// <remarks>
        /// Checks through the Questionnaire List to make sure the ID is valid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateQuestionnaireIDUsingGETAsyncWithHttpInfo (int? validateID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MainapicontrollerApi : IMainapicontrollerApi
    {
        private eu.operando.core.cpcu.cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MainapicontrollerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MainapicontrollerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = eu.operando.core.cpcu.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MainapicontrollerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MainapicontrollerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eu.operando.core.cpcu.cli.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eu.operando.core.cpcu.cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a Question  Adds a new Question to a specfic Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Object</returns>
        public Object AddQuestionUsingPOST (string questionnaireID, QuestionConfiguration qc)
        {
             ApiResponse<Object> localVarResponse = AddQuestionUsingPOSTWithHttpInfo(questionnaireID, qc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a Question  Adds a new Question to a specfic Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddQuestionUsingPOSTWithHttpInfo (string questionnaireID, QuestionConfiguration qc)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->AddQuestionUsingPOST");
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->AddQuestionUsingPOST");

            var localVarPath = "/api/qp/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuestionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Adds a Question  Adds a new Question to a specfic Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddQuestionUsingPOSTAsync (string questionnaireID, QuestionConfiguration qc)
        {
             ApiResponse<Object> localVarResponse = await AddQuestionUsingPOSTAsyncWithHttpInfo(questionnaireID, qc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a Question  Adds a new Question to a specfic Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddQuestionUsingPOSTAsyncWithHttpInfo (string questionnaireID, QuestionConfiguration qc)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->AddQuestionUsingPOST");
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->AddQuestionUsingPOST");

            var localVarPath = "/api/qp/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddQuestionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Creates a Questionnaire Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Object</returns>
        public Object CreateQuestionnaireUsingPOST (QuestionnaireConfiguration qc)
        {
             ApiResponse<Object> localVarResponse = CreateQuestionnaireUsingPOSTWithHttpInfo(qc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Questionnaire Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateQuestionnaireUsingPOSTWithHttpInfo (QuestionnaireConfiguration qc)
        {
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->CreateQuestionnaireUsingPOST");

            var localVarPath = "/api/qu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionnaireUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Creates a Questionnaire Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateQuestionnaireUsingPOSTAsync (QuestionnaireConfiguration qc)
        {
             ApiResponse<Object> localVarResponse = await CreateQuestionnaireUsingPOSTAsyncWithHttpInfo(qc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Questionnaire Creates a new Questionnaire and adds it to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateQuestionnaireUsingPOSTAsyncWithHttpInfo (QuestionnaireConfiguration qc)
        {
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->CreateQuestionnaireUsingPOST");

            var localVarPath = "/api/qu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionnaireUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Creates a Service Creates a new Service and adds it to the accessible Services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>Object</returns>
        public Object CreateServiceUsingPOST (ServiceConfiguration sc)
        {
             ApiResponse<Object> localVarResponse = CreateServiceUsingPOSTWithHttpInfo(sc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Service Creates a new Service and adds it to the accessible Services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateServiceUsingPOSTWithHttpInfo (ServiceConfiguration sc)
        {
            // verify the required parameter 'sc' is set
            if (sc == null)
                throw new ApiException(400, "Missing required parameter 'sc' when calling MainapicontrollerApi->CreateServiceUsingPOST");

            var localVarPath = "/api/se";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sc != null && sc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Creates a Service Creates a new Service and adds it to the accessible Services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateServiceUsingPOSTAsync (ServiceConfiguration sc)
        {
             ApiResponse<Object> localVarResponse = await CreateServiceUsingPOSTAsyncWithHttpInfo(sc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Service Creates a new Service and adds it to the accessible Services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateServiceUsingPOSTAsyncWithHttpInfo (ServiceConfiguration sc)
        {
            // verify the required parameter 'sc' is set
            if (sc == null)
                throw new ApiException(400, "Missing required parameter 'sc' when calling MainapicontrollerApi->CreateServiceUsingPOST");

            var localVarPath = "/api/se";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sc != null && sc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateServiceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a Question Deletes a specific Question within a Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>Object</returns>
        public Object DeleteQuestionUsingDELETE (string questionnaireID, string questionID)
        {
             ApiResponse<Object> localVarResponse = DeleteQuestionUsingDELETEWithHttpInfo(questionnaireID, questionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Question Deletes a specific Question within a Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteQuestionUsingDELETEWithHttpInfo (string questionnaireID, string questionID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->DeleteQuestionUsingDELETE");
            // verify the required parameter 'questionID' is set
            if (questionID == null)
                throw new ApiException(400, "Missing required parameter 'questionID' when calling MainapicontrollerApi->DeleteQuestionUsingDELETE");

            var localVarPath = "/api/qp/{questionnaireID}/{questionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (questionID != null) localVarPathParams.Add("questionID", Configuration.ApiClient.ParameterToString(questionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a Question Deletes a specific Question within a Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteQuestionUsingDELETEAsync (string questionnaireID, string questionID)
        {
             ApiResponse<Object> localVarResponse = await DeleteQuestionUsingDELETEAsyncWithHttpInfo(questionnaireID, questionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a Question Deletes a specific Question within a Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be deleted</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionUsingDELETEAsyncWithHttpInfo (string questionnaireID, string questionID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->DeleteQuestionUsingDELETE");
            // verify the required parameter 'questionID' is set
            if (questionID == null)
                throw new ApiException(400, "Missing required parameter 'questionID' when calling MainapicontrollerApi->DeleteQuestionUsingDELETE");

            var localVarPath = "/api/qp/{questionnaireID}/{questionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (questionID != null) localVarPathParams.Add("questionID", Configuration.ApiClient.ParameterToString(questionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a Questionnaire Deletes a specific Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>Object</returns>
        public Object DeleteQuestionnaireUsingDELETE (int? questionnaireID)
        {
             ApiResponse<Object> localVarResponse = DeleteQuestionnaireUsingDELETEWithHttpInfo(questionnaireID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Questionnaire Deletes a specific Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteQuestionnaireUsingDELETEWithHttpInfo (int? questionnaireID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->DeleteQuestionnaireUsingDELETE");

            var localVarPath = "/api/qu/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionnaireUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a Questionnaire Deletes a specific Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteQuestionnaireUsingDELETEAsync (int? questionnaireID)
        {
             ApiResponse<Object> localVarResponse = await DeleteQuestionnaireUsingDELETEAsyncWithHttpInfo(questionnaireID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a Questionnaire Deletes a specific Questionnaire
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question to be deleted</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionnaireUsingDELETEAsyncWithHttpInfo (int? questionnaireID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->DeleteQuestionnaireUsingDELETE");

            var localVarPath = "/api/qu/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionnaireUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a Service Deletes a specific service from the accessible services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>Object</returns>
        public Object DeleteServiceUsingDELETE (int? serviceID)
        {
             ApiResponse<Object> localVarResponse = DeleteServiceUsingDELETEWithHttpInfo(serviceID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Service Deletes a specific service from the accessible services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteServiceUsingDELETEWithHttpInfo (int? serviceID)
        {
            // verify the required parameter 'serviceID' is set
            if (serviceID == null)
                throw new ApiException(400, "Missing required parameter 'serviceID' when calling MainapicontrollerApi->DeleteServiceUsingDELETE");

            var localVarPath = "/api/se/{serviceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serviceID != null) localVarPathParams.Add("serviceID", Configuration.ApiClient.ParameterToString(serviceID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteServiceUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a Service Deletes a specific service from the accessible services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteServiceUsingDELETEAsync (int? serviceID)
        {
             ApiResponse<Object> localVarResponse = await DeleteServiceUsingDELETEAsyncWithHttpInfo(serviceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a Service Deletes a specific service from the accessible services
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">The ServiceID to be deleted</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceUsingDELETEAsyncWithHttpInfo (int? serviceID)
        {
            // verify the required parameter 'serviceID' is set
            if (serviceID == null)
                throw new ApiException(400, "Missing required parameter 'serviceID' when calling MainapicontrollerApi->DeleteServiceUsingDELETE");

            var localVarPath = "/api/se/{serviceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serviceID != null) localVarPathParams.Add("serviceID", Configuration.ApiClient.ParameterToString(serviceID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteServiceUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieves a Question pool Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>List&lt;QuestionConfiguration&gt;</returns>
        public List<QuestionConfiguration> GetQuestionPoolUsingGET (int? questionnaireID)
        {
             ApiResponse<List<QuestionConfiguration>> localVarResponse = GetQuestionPoolUsingGETWithHttpInfo(questionnaireID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a Question pool Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>ApiResponse of List&lt;QuestionConfiguration&gt;</returns>
        public ApiResponse< List<QuestionConfiguration> > GetQuestionPoolUsingGETWithHttpInfo (int? questionnaireID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->GetQuestionPoolUsingGET");

            var localVarPath = "/api/qp/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionPoolUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionConfiguration>)));
            
        }

        /// <summary>
        /// Retrieves a Question pool Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of List&lt;QuestionConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionConfiguration>> GetQuestionPoolUsingGETAsync (int? questionnaireID)
        {
             ApiResponse<List<QuestionConfiguration>> localVarResponse = await GetQuestionPoolUsingGETAsyncWithHttpInfo(questionnaireID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a Question pool Gets the entire Question pool for a given Questionnaire. NOTE: This returns all the Questions, not a subset (as done in the Application)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionConfiguration>>> GetQuestionPoolUsingGETAsyncWithHttpInfo (int? questionnaireID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->GetQuestionPoolUsingGET");

            var localVarPath = "/api/qp/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionPoolUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionConfiguration>)));
            
        }

        /// <summary>
        /// Reads Questionnaires Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>List&lt;QuestionnaireConfiguration&gt;</returns>
        public List<QuestionnaireConfiguration> GetQuestionnairesUsingGET (string search = null, string field = null)
        {
             ApiResponse<List<QuestionnaireConfiguration>> localVarResponse = GetQuestionnairesUsingGETWithHttpInfo(search, field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reads Questionnaires Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>ApiResponse of List&lt;QuestionnaireConfiguration&gt;</returns>
        public ApiResponse< List<QuestionnaireConfiguration> > GetQuestionnairesUsingGETWithHttpInfo (string search = null, string field = null)
        {

            var localVarPath = "/api/qu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionnairesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionnaireConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionnaireConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionnaireConfiguration>)));
            
        }

        /// <summary>
        /// Reads Questionnaires Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>Task of List&lt;QuestionnaireConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionnaireConfiguration>> GetQuestionnairesUsingGETAsync (string search = null, string field = null)
        {
             ApiResponse<List<QuestionnaireConfiguration>> localVarResponse = await GetQuestionnairesUsingGETAsyncWithHttpInfo(search, field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reads Questionnaires Gets the accessible questionnaires as a JSON String. If optional parameters are filled, then a specific Questionnaire can be returned. Must be correctly capitalised to returnthe correct result. Will return a JSON Array if multiple Objects satisfy the predicate.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific Questionnaire (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Questionnaire. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionnaireConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionnaireConfiguration>>> GetQuestionnairesUsingGETAsyncWithHttpInfo (string search = null, string field = null)
        {

            var localVarPath = "/api/qu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionnairesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionnaireConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionnaireConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionnaireConfiguration>)));
            
        }

        /// <summary>
        /// getQuestionpl 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;QuestionConfiguration&gt;</returns>
        public List<QuestionConfiguration> GetQuestionplUsingGET ()
        {
             ApiResponse<List<QuestionConfiguration>> localVarResponse = GetQuestionplUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// getQuestionpl 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;QuestionConfiguration&gt;</returns>
        public ApiResponse< List<QuestionConfiguration> > GetQuestionplUsingGETWithHttpInfo ()
        {

            var localVarPath = "/api/qp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionplUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionConfiguration>)));
            
        }

        /// <summary>
        /// getQuestionpl 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;QuestionConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionConfiguration>> GetQuestionplUsingGETAsync ()
        {
             ApiResponse<List<QuestionConfiguration>> localVarResponse = await GetQuestionplUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// getQuestionpl 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;QuestionConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionConfiguration>>> GetQuestionplUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/qp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionplUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionConfiguration>)));
            
        }

        /// <summary>
        /// Read Services Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>List&lt;ServiceConfiguration&gt;</returns>
        public List<ServiceConfiguration> GetServicesUsingGET (string search = null, string field = null)
        {
             ApiResponse<List<ServiceConfiguration>> localVarResponse = GetServicesUsingGETWithHttpInfo(search, field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read Services Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceConfiguration&gt;</returns>
        public ApiResponse< List<ServiceConfiguration> > GetServicesUsingGETWithHttpInfo (string search = null, string field = null)
        {

            var localVarPath = "/api/se";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceConfiguration>)));
            
        }

        /// <summary>
        /// Read Services Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>Task of List&lt;ServiceConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceConfiguration>> GetServicesUsingGETAsync (string search = null, string field = null)
        {
             ApiResponse<List<ServiceConfiguration>> localVarResponse = await GetServicesUsingGETAsyncWithHttpInfo(search, field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read Services Returns the JSON representation of the currently accessible services. If the parameters are filled then a specific service can be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The String to search by, when searching for a specific service (optional)</param>
        /// <param name="field">The field to search for the String. This can be any valid field in the Service. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ServiceConfiguration>>> GetServicesUsingGETAsyncWithHttpInfo (string search = null, string field = null)
        {

            var localVarPath = "/api/se";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceConfiguration>)));
            
        }

        /// <summary>
        /// Reads a specific Questionnaire Gets a specific Questionnaire as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>List&lt;QuestionnaireConfiguration&gt;</returns>
        public List<QuestionnaireConfiguration> GetSpecificQuestionnaireUsingGET (int? questionnaireID)
        {
             ApiResponse<List<QuestionnaireConfiguration>> localVarResponse = GetSpecificQuestionnaireUsingGETWithHttpInfo(questionnaireID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a specific Questionnaire Gets a specific Questionnaire as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>ApiResponse of List&lt;QuestionnaireConfiguration&gt;</returns>
        public ApiResponse< List<QuestionnaireConfiguration> > GetSpecificQuestionnaireUsingGETWithHttpInfo (int? questionnaireID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->GetSpecificQuestionnaireUsingGET");

            var localVarPath = "/api/qu/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificQuestionnaireUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionnaireConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionnaireConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionnaireConfiguration>)));
            
        }

        /// <summary>
        /// Reads a specific Questionnaire Gets a specific Questionnaire as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of List&lt;QuestionnaireConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionnaireConfiguration>> GetSpecificQuestionnaireUsingGETAsync (int? questionnaireID)
        {
             ApiResponse<List<QuestionnaireConfiguration>> localVarResponse = await GetSpecificQuestionnaireUsingGETAsyncWithHttpInfo(questionnaireID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reads a specific Questionnaire Gets a specific Questionnaire as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionnaireConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionnaireConfiguration>>> GetSpecificQuestionnaireUsingGETAsyncWithHttpInfo (int? questionnaireID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->GetSpecificQuestionnaireUsingGET");

            var localVarPath = "/api/qu/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificQuestionnaireUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionnaireConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionnaireConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionnaireConfiguration>)));
            
        }

        /// <summary>
        /// Reads a specific Service Gets a specific Service as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>List&lt;ServiceConfiguration&gt;</returns>
        public List<ServiceConfiguration> GetSpecificServiceUsingGET (int? serviceID)
        {
             ApiResponse<List<ServiceConfiguration>> localVarResponse = GetSpecificServiceUsingGETWithHttpInfo(serviceID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a specific Service Gets a specific Service as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>ApiResponse of List&lt;ServiceConfiguration&gt;</returns>
        public ApiResponse< List<ServiceConfiguration> > GetSpecificServiceUsingGETWithHttpInfo (int? serviceID)
        {
            // verify the required parameter 'serviceID' is set
            if (serviceID == null)
                throw new ApiException(400, "Missing required parameter 'serviceID' when calling MainapicontrollerApi->GetSpecificServiceUsingGET");

            var localVarPath = "/api/se/{serviceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serviceID != null) localVarPathParams.Add("serviceID", Configuration.ApiClient.ParameterToString(serviceID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificServiceUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceConfiguration>)));
            
        }

        /// <summary>
        /// Reads a specific Service Gets a specific Service as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>Task of List&lt;ServiceConfiguration&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceConfiguration>> GetSpecificServiceUsingGETAsync (int? serviceID)
        {
             ApiResponse<List<ServiceConfiguration>> localVarResponse = await GetSpecificServiceUsingGETAsyncWithHttpInfo(serviceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reads a specific Service Gets a specific Service as a JSON String
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceID">serviceID</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceConfiguration&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ServiceConfiguration>>> GetSpecificServiceUsingGETAsyncWithHttpInfo (int? serviceID)
        {
            // verify the required parameter 'serviceID' is set
            if (serviceID == null)
                throw new ApiException(400, "Missing required parameter 'serviceID' when calling MainapicontrollerApi->GetSpecificServiceUsingGET");

            var localVarPath = "/api/se/{serviceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serviceID != null) localVarPathParams.Add("serviceID", Configuration.ApiClient.ParameterToString(serviceID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificServiceUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceConfiguration>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceConfiguration>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceConfiguration>)));
            
        }

        /// <summary>
        /// Reload Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object ReloadAppUsingGET ()
        {
             ApiResponse<Object> localVarResponse = ReloadAppUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reload Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ReloadAppUsingGETWithHttpInfo ()
        {

            var localVarPath = "/api/reload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReloadAppUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Reload Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReloadAppUsingGETAsync ()
        {
             ApiResponse<Object> localVarResponse = await ReloadAppUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reload Reloads the Active configuration within the Application, this means that any changes made within the API are then accessible to the CPCU Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReloadAppUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/reload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReloadAppUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Display the Admin Panel This displays a UI in which the Questionnaires and Questions can be altered
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ShowPageUsingGET ()
        {
             ApiResponse<ModelAndView> localVarResponse = ShowPageUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Display the Admin Panel This displays a UI in which the Questionnaires and Questions can be altered
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ShowPageUsingGETWithHttpInfo ()
        {

            var localVarPath = "/api/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowPageUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
            
        }

        /// <summary>
        /// Display the Admin Panel This displays a UI in which the Questionnaires and Questions can be altered
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ShowPageUsingGETAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ShowPageUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Display the Admin Panel This displays a UI in which the Questionnaires and Questions can be altered
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ShowPageUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/show";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowPageUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
            
        }

        /// <summary>
        /// Updates a Question Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Object</returns>
        public Object UpdateQuestionUsingPOST (string questionnaireID, string questionID, QuestionConfiguration qc)
        {
             ApiResponse<Object> localVarResponse = UpdateQuestionUsingPOSTWithHttpInfo(questionnaireID, questionID, qc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Question Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateQuestionUsingPOSTWithHttpInfo (string questionnaireID, string questionID, QuestionConfiguration qc)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->UpdateQuestionUsingPOST");
            // verify the required parameter 'questionID' is set
            if (questionID == null)
                throw new ApiException(400, "Missing required parameter 'questionID' when calling MainapicontrollerApi->UpdateQuestionUsingPOST");
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->UpdateQuestionUsingPOST");

            var localVarPath = "/api/qp/{questionnaireID}/{questionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (questionID != null) localVarPathParams.Add("questionID", Configuration.ApiClient.ParameterToString(questionID)); // path parameter
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Updates a Question Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateQuestionUsingPOSTAsync (string questionnaireID, string questionID, QuestionConfiguration qc)
        {
             ApiResponse<Object> localVarResponse = await UpdateQuestionUsingPOSTAsyncWithHttpInfo(questionnaireID, questionID, qc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Question Updates a specfic Question within a Questionnaire with the given JSON Data
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">The questionnaireID of the Questionnaire that contains the Question</param>
        /// <param name="questionID">The questionID which identifies the Question to be updated</param>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuestionUsingPOSTAsyncWithHttpInfo (string questionnaireID, string questionID, QuestionConfiguration qc)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->UpdateQuestionUsingPOST");
            // verify the required parameter 'questionID' is set
            if (questionID == null)
                throw new ApiException(400, "Missing required parameter 'questionID' when calling MainapicontrollerApi->UpdateQuestionUsingPOST");
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->UpdateQuestionUsingPOST");

            var localVarPath = "/api/qp/{questionnaireID}/{questionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (questionID != null) localVarPathParams.Add("questionID", Configuration.ApiClient.ParameterToString(questionID)); // path parameter
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Updates a Questionnaire Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>Object</returns>
        public Object UpdateQuestionniareUsingPOST (QuestionnaireConfiguration qc, int? questionnaireID)
        {
             ApiResponse<Object> localVarResponse = UpdateQuestionniareUsingPOSTWithHttpInfo(qc, questionnaireID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Questionnaire Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateQuestionniareUsingPOSTWithHttpInfo (QuestionnaireConfiguration qc, int? questionnaireID)
        {
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->UpdateQuestionniareUsingPOST");
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->UpdateQuestionniareUsingPOST");

            var localVarPath = "/api/qu/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionniareUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Updates a Questionnaire Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateQuestionniareUsingPOSTAsync (QuestionnaireConfiguration qc, int? questionnaireID)
        {
             ApiResponse<Object> localVarResponse = await UpdateQuestionniareUsingPOSTAsyncWithHttpInfo(qc, questionnaireID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Questionnaire Updates a new Questionnaire and adds it back to the accessible Questionnaires
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qc">The QuestionnaireConfiguration which defines the parameters to create a new Questionnaire</param>
        /// <param name="questionnaireID">The Questionnaire ID to be updated</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuestionniareUsingPOSTAsyncWithHttpInfo (QuestionnaireConfiguration qc, int? questionnaireID)
        {
            // verify the required parameter 'qc' is set
            if (qc == null)
                throw new ApiException(400, "Missing required parameter 'qc' when calling MainapicontrollerApi->UpdateQuestionniareUsingPOST");
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->UpdateQuestionniareUsingPOST");

            var localVarPath = "/api/qu/{questionnaireID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (qc != null && qc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(qc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = qc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionniareUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Updates a Service Updates a specific service with the data submitted to this operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>Object</returns>
        public Object UpdateServiceUsingPOST (ServiceConfiguration sc, int? serviceID)
        {
             ApiResponse<Object> localVarResponse = UpdateServiceUsingPOSTWithHttpInfo(sc, serviceID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Service Updates a specific service with the data submitted to this operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateServiceUsingPOSTWithHttpInfo (ServiceConfiguration sc, int? serviceID)
        {
            // verify the required parameter 'sc' is set
            if (sc == null)
                throw new ApiException(400, "Missing required parameter 'sc' when calling MainapicontrollerApi->UpdateServiceUsingPOST");
            // verify the required parameter 'serviceID' is set
            if (serviceID == null)
                throw new ApiException(400, "Missing required parameter 'serviceID' when calling MainapicontrollerApi->UpdateServiceUsingPOST");

            var localVarPath = "/api/se/{serviceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serviceID != null) localVarPathParams.Add("serviceID", Configuration.ApiClient.ParameterToString(serviceID)); // path parameter
            if (sc != null && sc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServiceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Updates a Service Updates a specific service with the data submitted to this operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateServiceUsingPOSTAsync (ServiceConfiguration sc, int? serviceID)
        {
             ApiResponse<Object> localVarResponse = await UpdateServiceUsingPOSTAsyncWithHttpInfo(sc, serviceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Service Updates a specific service with the data submitted to this operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sc">The ServiceConfiguration containing the parameters to create a new Service</param>
        /// <param name="serviceID">The ServiceID of the service to be updated</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateServiceUsingPOSTAsyncWithHttpInfo (ServiceConfiguration sc, int? serviceID)
        {
            // verify the required parameter 'sc' is set
            if (sc == null)
                throw new ApiException(400, "Missing required parameter 'sc' when calling MainapicontrollerApi->UpdateServiceUsingPOST");
            // verify the required parameter 'serviceID' is set
            if (serviceID == null)
                throw new ApiException(400, "Missing required parameter 'serviceID' when calling MainapicontrollerApi->UpdateServiceUsingPOST");

            var localVarPath = "/api/se/{serviceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serviceID != null) localVarPathParams.Add("serviceID", Configuration.ApiClient.ParameterToString(serviceID)); // path parameter
            if (sc != null && sc.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServiceUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>Object</returns>
        public Object ValidateQuestionIDUsingGET (int? questionnaireID, int? validateID)
        {
             ApiResponse<Object> localVarResponse = ValidateQuestionIDUsingGETWithHttpInfo(questionnaireID, validateID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ValidateQuestionIDUsingGETWithHttpInfo (int? questionnaireID, int? validateID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->ValidateQuestionIDUsingGET");
            // verify the required parameter 'validateID' is set
            if (validateID == null)
                throw new ApiException(400, "Missing required parameter 'validateID' when calling MainapicontrollerApi->ValidateQuestionIDUsingGET");

            var localVarPath = "/api/qpid/{questionnaireID}/{validateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (validateID != null) localVarPathParams.Add("validateID", Configuration.ApiClient.ParameterToString(validateID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateQuestionIDUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ValidateQuestionIDUsingGETAsync (int? questionnaireID, int? validateID)
        {
             ApiResponse<Object> localVarResponse = await ValidateQuestionIDUsingGETAsyncWithHttpInfo(questionnaireID, validateID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireID">questionnaireID</param>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateQuestionIDUsingGETAsyncWithHttpInfo (int? questionnaireID, int? validateID)
        {
            // verify the required parameter 'questionnaireID' is set
            if (questionnaireID == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireID' when calling MainapicontrollerApi->ValidateQuestionIDUsingGET");
            // verify the required parameter 'validateID' is set
            if (validateID == null)
                throw new ApiException(400, "Missing required parameter 'validateID' when calling MainapicontrollerApi->ValidateQuestionIDUsingGET");

            var localVarPath = "/api/qpid/{questionnaireID}/{validateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionnaireID != null) localVarPathParams.Add("questionnaireID", Configuration.ApiClient.ParameterToString(questionnaireID)); // path parameter
            if (validateID != null) localVarPathParams.Add("validateID", Configuration.ApiClient.ParameterToString(validateID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateQuestionIDUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>Object</returns>
        public Object ValidateQuestionnaireIDUsingGET (int? validateID)
        {
             ApiResponse<Object> localVarResponse = ValidateQuestionnaireIDUsingGETWithHttpInfo(validateID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ValidateQuestionnaireIDUsingGETWithHttpInfo (int? validateID)
        {
            // verify the required parameter 'validateID' is set
            if (validateID == null)
                throw new ApiException(400, "Missing required parameter 'validateID' when calling MainapicontrollerApi->ValidateQuestionnaireIDUsingGET");

            var localVarPath = "/api/quid/{validateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (validateID != null) localVarPathParams.Add("validateID", Configuration.ApiClient.ParameterToString(validateID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateQuestionnaireIDUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ValidateQuestionnaireIDUsingGETAsync (int? validateID)
        {
             ApiResponse<Object> localVarResponse = await ValidateQuestionnaireIDUsingGETAsyncWithHttpInfo(validateID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verifies an ID is valid Checks through the Questionnaire List to make sure the ID is valid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateID">validateID</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateQuestionnaireIDUsingGETAsyncWithHttpInfo (int? validateID)
        {
            // verify the required parameter 'validateID' is set
            if (validateID == null)
                throw new ApiException(400, "Missing required parameter 'validateID' when calling MainapicontrollerApi->ValidateQuestionnaireIDUsingGET");

            var localVarPath = "/api/quid/{validateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (validateID != null) localVarPathParams.Add("validateID", Configuration.ApiClient.ParameterToString(validateID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateQuestionnaireIDUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}

/* 
 * REST API for CPCU Operando
 *
 * A REST API to access and edit Questionnaires and Services within the CPCU platform
 *
 * OpenAPI spec version: 2.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace eu.operando.core.cpcu.cli.Model
{
    /// <summary>
    /// QuestionConfiguration
    /// </summary>
    [DataContract]
    public partial class QuestionConfiguration :  IEquatable<QuestionConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionConfiguration" /> class.
        /// </summary>
        /// <param name="Category">Category.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="PrivacyRanking">PrivacyRanking.</param>
        /// <param name="QuestionString">QuestionString.</param>
        /// <param name="Weight">Weight.</param>
        public QuestionConfiguration(string Category = default(string), int? Id = default(int?), string Metadata = default(string), int? PrivacyRanking = default(int?), string QuestionString = default(string), double? Weight = default(double?))
        {
            this.Category = Category;
            this.Id = Id;
            this.Metadata = Metadata;
            this.PrivacyRanking = PrivacyRanking;
            this.QuestionString = QuestionString;
            this.Weight = Weight;
        }
        
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }
        /// <summary>
        /// Gets or Sets PrivacyRanking
        /// </summary>
        [DataMember(Name="privacyRanking", EmitDefaultValue=false)]
        public int? PrivacyRanking { get; set; }
        /// <summary>
        /// Gets or Sets QuestionString
        /// </summary>
        [DataMember(Name="questionString", EmitDefaultValue=false)]
        public string QuestionString { get; set; }
        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuestionConfiguration {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PrivacyRanking: ").Append(PrivacyRanking).Append("\n");
            sb.Append("  QuestionString: ").Append(QuestionString).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as QuestionConfiguration);
        }

        /// <summary>
        /// Returns true if QuestionConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of QuestionConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuestionConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.PrivacyRanking == other.PrivacyRanking ||
                    this.PrivacyRanking != null &&
                    this.PrivacyRanking.Equals(other.PrivacyRanking)
                ) && 
                (
                    this.QuestionString == other.QuestionString ||
                    this.QuestionString != null &&
                    this.QuestionString.Equals(other.QuestionString)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.PrivacyRanking != null)
                    hash = hash * 59 + this.PrivacyRanking.GetHashCode();
                if (this.QuestionString != null)
                    hash = hash * 59 + this.QuestionString.GetHashCode();
                if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}

/* 
 * REST API for CPCU Operando
 *
 * A REST API to access and edit Questionnaires and Services within the CPCU platform
 *
 * OpenAPI spec version: 2.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace eu.operando.core.cpcu.cli.Model
{
    /// <summary>
    /// QuestionnaireConfiguration
    /// </summary>
    [DataContract]
    public partial class QuestionnaireConfiguration :  IEquatable<QuestionnaireConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnaireConfiguration" /> class.
        /// </summary>
        /// <param name="ClassLoader">ClassLoader.</param>
        /// <param name="Dependancies">Dependancies.</param>
        /// <param name="GeneratedQuestions">GeneratedQuestions.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="Processor">Processor.</param>
        /// <param name="Type">Type.</param>
        public QuestionnaireConfiguration(string ClassLoader = default(string), int? Dependancies = default(int?), bool? GeneratedQuestions = default(bool?), int? Id = default(int?), string Metadata = default(string), string Processor = default(string), string Type = default(string))
        {
            this.ClassLoader = ClassLoader;
            this.Dependancies = Dependancies;
            this.GeneratedQuestions = GeneratedQuestions;
            this.Id = Id;
            this.Metadata = Metadata;
            this.Processor = Processor;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets ClassLoader
        /// </summary>
        [DataMember(Name="classLoader", EmitDefaultValue=false)]
        public string ClassLoader { get; set; }
        /// <summary>
        /// Gets or Sets Dependancies
        /// </summary>
        [DataMember(Name="dependancies", EmitDefaultValue=false)]
        public int? Dependancies { get; set; }
        /// <summary>
        /// Gets or Sets GeneratedQuestions
        /// </summary>
        [DataMember(Name="generatedQuestions", EmitDefaultValue=false)]
        public bool? GeneratedQuestions { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }
        /// <summary>
        /// Gets or Sets Processor
        /// </summary>
        [DataMember(Name="processor", EmitDefaultValue=false)]
        public string Processor { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuestionnaireConfiguration {\n");
            sb.Append("  ClassLoader: ").Append(ClassLoader).Append("\n");
            sb.Append("  Dependancies: ").Append(Dependancies).Append("\n");
            sb.Append("  GeneratedQuestions: ").Append(GeneratedQuestions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as QuestionnaireConfiguration);
        }

        /// <summary>
        /// Returns true if QuestionnaireConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of QuestionnaireConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuestionnaireConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClassLoader == other.ClassLoader ||
                    this.ClassLoader != null &&
                    this.ClassLoader.Equals(other.ClassLoader)
                ) && 
                (
                    this.Dependancies == other.Dependancies ||
                    this.Dependancies != null &&
                    this.Dependancies.Equals(other.Dependancies)
                ) && 
                (
                    this.GeneratedQuestions == other.GeneratedQuestions ||
                    this.GeneratedQuestions != null &&
                    this.GeneratedQuestions.Equals(other.GeneratedQuestions)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.Processor == other.Processor ||
                    this.Processor != null &&
                    this.Processor.Equals(other.Processor)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClassLoader != null)
                    hash = hash * 59 + this.ClassLoader.GetHashCode();
                if (this.Dependancies != null)
                    hash = hash * 59 + this.Dependancies.GetHashCode();
                if (this.GeneratedQuestions != null)
                    hash = hash * 59 + this.GeneratedQuestions.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.Processor != null)
                    hash = hash * 59 + this.Processor.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}

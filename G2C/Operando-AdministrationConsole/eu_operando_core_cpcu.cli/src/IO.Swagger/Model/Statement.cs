/* 
 * REST API for CPCU Operando
 *
 * A REST API to access and edit Questionnaires and Services within the CPCU platform
 *
 * OpenAPI spec version: 2.0
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace eu.operando.core.cpcu.cli.Model
{
    /// <summary>
    /// Statement
    /// </summary>
    [DataContract]
    public partial class Statement :  IEquatable<Statement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Statement" /> class.
        /// </summary>
        /// <param name="StatementString">StatementString.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="Rating">Rating.</param>
        /// <param name="PrivacyRanking">PrivacyRanking.</param>
        /// <param name="Weight">Weight.</param>
        /// <param name="Role">Role.</param>
        /// <param name="RoleRank">RoleRank.</param>
        /// <param name="Action">Action.</param>
        /// <param name="ActionRole">ActionRole.</param>
        public Statement(string StatementString = default(string), string Metadata = default(string), int? Rating = default(int?), int? PrivacyRanking = default(int?), double? Weight = default(double?), string Role = default(string), int? RoleRank = default(int?), string Action = default(string), int? ActionRole = default(int?))
        {
            this.StatementString = StatementString;
            this.Metadata = Metadata;
            this.Rating = Rating;
            this.PrivacyRanking = PrivacyRanking;
            this.Weight = Weight;
            this.Role = Role;
            this.RoleRank = RoleRank;
            this.Action = Action;
            this.ActionRole = ActionRole;
        }
        
        /// <summary>
        /// Gets or Sets StatementString
        /// </summary>
        [DataMember(Name="statementString", EmitDefaultValue=false)]
        public string StatementString { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }
        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public int? Rating { get; set; }
        /// <summary>
        /// Gets or Sets PrivacyRanking
        /// </summary>
        [DataMember(Name="privacyRanking", EmitDefaultValue=false)]
        public int? PrivacyRanking { get; set; }
        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }
        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }
        /// <summary>
        /// Gets or Sets RoleRank
        /// </summary>
        [DataMember(Name="roleRank", EmitDefaultValue=false)]
        public int? RoleRank { get; set; }
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// Gets or Sets ActionRole
        /// </summary>
        [DataMember(Name="actionRole", EmitDefaultValue=false)]
        public int? ActionRole { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statement {\n");
            sb.Append("  StatementString: ").Append(StatementString).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  PrivacyRanking: ").Append(PrivacyRanking).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  RoleRank: ").Append(RoleRank).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ActionRole: ").Append(ActionRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Statement);
        }

        /// <summary>
        /// Returns true if Statement instances are equal
        /// </summary>
        /// <param name="other">Instance of Statement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StatementString == other.StatementString ||
                    this.StatementString != null &&
                    this.StatementString.Equals(other.StatementString)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.Rating == other.Rating ||
                    this.Rating != null &&
                    this.Rating.Equals(other.Rating)
                ) && 
                (
                    this.PrivacyRanking == other.PrivacyRanking ||
                    this.PrivacyRanking != null &&
                    this.PrivacyRanking.Equals(other.PrivacyRanking)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                ) && 
                (
                    this.Role == other.Role ||
                    this.Role != null &&
                    this.Role.Equals(other.Role)
                ) && 
                (
                    this.RoleRank == other.RoleRank ||
                    this.RoleRank != null &&
                    this.RoleRank.Equals(other.RoleRank)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.ActionRole == other.ActionRole ||
                    this.ActionRole != null &&
                    this.ActionRole.Equals(other.ActionRole)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StatementString != null)
                    hash = hash * 59 + this.StatementString.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.Rating != null)
                    hash = hash * 59 + this.Rating.GetHashCode();
                if (this.PrivacyRanking != null)
                    hash = hash * 59 + this.PrivacyRanking.GetHashCode();
                if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                if (this.Role != null)
                    hash = hash * 59 + this.Role.GetHashCode();
                if (this.RoleRank != null)
                    hash = hash * 59 + this.RoleRank.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.ActionRole != null)
                    hash = hash * 59 + this.ActionRole.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}

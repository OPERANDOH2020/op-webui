/* 
 * OSP Enforcement (OSE)
 *
 *  The OSP enforcement component provides a set of functions that manage the interaction of OSP behaviour with the user's private data. The OSE component is largely in charge of ensuring that an OSP follows both privacy regulations and policies put in place by the user (i.e. in the OPERANDO UPPs). There are a set of events that trigger the usage of this API.  1) When a new G2C OSP registers with OPERANDO via the OPERANDO console. The management console informs the OSE, which then checks that an OSP conforms with existing privacy regulations; if it breaches the regulations, the OSE returns via the management console a report describing the breaches.  2) When a change of OSP privacy policy or of the OSP's privacy settings are detected by the watchdog component. The watchdog component sends a message to a privacy analyst who reviews any changes. The privacy analyst may then inform the OSE of the new OSP information (to be checked for compliance with regulations and users' UPPs.  3) When a privacy legislation is entered (or changed) via the Regulator API. The OSE checks registered OSPs for compliance with the new regulations; where there is a breach the OSP is notified either by e-mail or the console. 
 *
 * OpenAPI spec version: 0.0.8
 * Contact: support@operando.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace eu.operando.core.ose.cli.Model
{
    /// <summary>
    /// OSPPrivacyPolicy
    /// </summary>
    [DataContract]
    public partial class OSPPrivacyPolicy :  IEquatable<OSPPrivacyPolicy>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OSPPrivacyPolicy" /> class.
        /// </summary>
        /// <param name="OspPolicyId">OspPolicyId.</param>
        /// <param name="PolicyText">The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. .</param>
        /// <param name="PolicyUrl">The url location of the privacy policy of the OSP .</param>
        /// <param name="Workflow">The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. .</param>
        /// <param name="Policies">The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. .</param>
        public OSPPrivacyPolicy(string OspPolicyId = null, string PolicyText = null, string PolicyUrl = null, List<OSPDataRequest> Workflow = null, List<AccessPolicy> Policies = null)
        {
            this.OspPolicyId = OspPolicyId;
            this.PolicyText = PolicyText;
            this.PolicyUrl = PolicyUrl;
            this.Workflow = Workflow;
            this.Policies = Policies;
        }
        
        /// <summary>
        /// Gets or Sets OspPolicyId
        /// </summary>
        [DataMember(Name="osp_policy_id", EmitDefaultValue=false)]
        public string OspPolicyId { get; set; }
        /// <summary>
        /// The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. 
        /// </summary>
        /// <value>The content of the OSP privacy policy, textually described and published. It is a the full text adverstised by the OSP. </value>
        [DataMember(Name="policy_text", EmitDefaultValue=false)]
        public string PolicyText { get; set; }
        /// <summary>
        /// The url location of the privacy policy of the OSP 
        /// </summary>
        /// <value>The url location of the privacy policy of the OSP </value>
        [DataMember(Name="policy_url", EmitDefaultValue=false)]
        public string PolicyUrl { get; set; }
        /// <summary>
        /// The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. 
        /// </summary>
        /// <value>The sequence of requests that this OSP makes (simple ordered array list in this version). The requests describes the operations that the OSP may carry out on the data. This can be used for compliance checking and computation of user policies. </value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public List<OSPDataRequest> Workflow { get; set; }
        /// <summary>
        /// The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. 
        /// </summary>
        /// <value>The list of rights that the OSP intends to follow e.g. give X access to Y data for Z purpose. This information can then be used in calculation of the policy and in compliance checking. </value>
        [DataMember(Name="policies", EmitDefaultValue=false)]
        public List<AccessPolicy> Policies { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OSPPrivacyPolicy {\n");
            sb.Append("  OspPolicyId: ").Append(OspPolicyId).Append("\n");
            sb.Append("  PolicyText: ").Append(PolicyText).Append("\n");
            sb.Append("  PolicyUrl: ").Append(PolicyUrl).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OSPPrivacyPolicy);
        }

        /// <summary>
        /// Returns true if OSPPrivacyPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of OSPPrivacyPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OSPPrivacyPolicy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OspPolicyId == other.OspPolicyId ||
                    this.OspPolicyId != null &&
                    this.OspPolicyId.Equals(other.OspPolicyId)
                ) && 
                (
                    this.PolicyText == other.PolicyText ||
                    this.PolicyText != null &&
                    this.PolicyText.Equals(other.PolicyText)
                ) && 
                (
                    this.PolicyUrl == other.PolicyUrl ||
                    this.PolicyUrl != null &&
                    this.PolicyUrl.Equals(other.PolicyUrl)
                ) && 
                (
                    this.Workflow == other.Workflow ||
                    this.Workflow != null &&
                    this.Workflow.SequenceEqual(other.Workflow)
                ) && 
                (
                    this.Policies == other.Policies ||
                    this.Policies != null &&
                    this.Policies.SequenceEqual(other.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OspPolicyId != null)
                    hash = hash * 59 + this.OspPolicyId.GetHashCode();
                if (this.PolicyText != null)
                    hash = hash * 59 + this.PolicyText.GetHashCode();
                if (this.PolicyUrl != null)
                    hash = hash * 59 + this.PolicyUrl.GetHashCode();
                if (this.Workflow != null)
                    hash = hash * 59 + this.Workflow.GetHashCode();
                if (this.Policies != null)
                    hash = hash * 59 + this.Policies.GetHashCode();
                return hash;
            }
        }
    }

}

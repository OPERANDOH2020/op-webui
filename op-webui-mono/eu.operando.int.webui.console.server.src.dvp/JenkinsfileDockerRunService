#!groovy
//http://groovy-lang.org/semantics.html

node {	
	//Required constants
    currentBuild.result = "SUCCESS"
	//Provided vars
	def devopsSourcesRelativePath = 'op-webui-mono/eu.operando.int.webui.console.server.src.dvp'
	def devopsSourcesRepo = 'https://github.com/OPERANDOH2020/op-webui.git'
	def dependingTasks=[
	"",
	""
	]
	//Params defaults
	Boolean currentVerbose=false
	Boolean hasCredentials=false
	Boolean currentContinueTasks=true
	Boolean currentStopContainer=true
	Boolean currentForceClear=false
	Boolean currentClearOnFail=false
				
	try	{		
		//Computed vars
		def devopsSourcesPath
		def devopsSourcesGitRepoPath
		def devopsSourcesGitPath
		def workspace
		def jenkinsWorkspace
		
		Boolean hasEmptyWorkspace=false
		String workspaceContent=""

		Boolean hasNewDevopsSources=false

		String devopsSourcesLastCommitFile

		String devopsSourcesDiffPreviousCommit
		String devopsSourcesCurrentCommit
        String devopsSourcesLastCommit

		String mvnHome;
		
		stage ('Params Processing'){
			//def verbose -> defaults to "false"
			//def scmCredentials -> defaults to undefined
			//def continueTasks -> defaults to "true"
			//def stopContainer -> defaults to "true"
			//def forceClear -> defaults to "false"
			//def clearOnFail -> defaults to "false"
			//WARNING JENKINS SEND BOOLEANS AS STRING
			try{
			    currentVerbose=((verbose=="true")||(verbose==true))
			} catch (err){
			    println ("verbosity not provided defaults to false")
			}
			if (currentVerbose) println ("verbose = " + currentVerbose)
			try{
			    currentClearOnFail=((clearOnFail=="true")||(clearOnFail==true))
			} catch (err){
			    println ("clearOnFail not provided defaults to false")
			}
			if (currentVerbose) println ("currentClearOnFail = " + currentClearOnFail)											
			try{
			    currentContinueTasks=((continueTasks=="true")||(continueTasks==true))
			} catch (err){
			    println ("continueTasks not provided defaults to true")
			}
			if (currentVerbose) println ("continueTasks = " + currentContinueTasks)							
			try{
			    currentStopContainer=((stopContainer=="true")||(stopContainer==true))
			} catch (err){
			    println ("stopContainer not provided defaults to true")
			}
			if (currentVerbose) println ("currentStopContainer = " + currentStopContainer)				
			try{
			    currentForceClear=((forceClear=="true")||(forceClear==true))
			} catch (err){
			    println ("forceClear not provided defaults to false")
			}
			if (currentVerbose) println ("currentForceClear = " + currentForceClear)											
		}
		if (currentForceClear){
			stage ('Forced Clear'){
            	sh "rm -rf ${WORKSPACE}/src"	   			
			}
		}
		stage ('Calculate Variables'){
		    workspace=WORKSPACE
			if (currentVerbose) println ("workspace = " + workspace)						    
		    jenkinsWorkspace=WORKSPACE+"/../workspace\\@script"
			if (currentVerbose) println ("jenkinsWorkspace = " + jenkinsWorkspace)				
		    devopsSourcesPath=workspace
			if (currentVerbose) println ("devopsSourcesPath = " + devopsSourcesPath)			
		    devopsSourcesGitRepoPath=jenkinsWorkspace
			if (currentVerbose) println ("devopsSourcesGitRepoPath = " + devopsSourcesGitRepoPath)
		    devopsSourcesGitPath=devopsSourcesGitRepoPath + "/" + devopsSourcesRelativePath
			if (currentVerbose) println ("devopsSourcesGitPath = " + devopsSourcesGitPath)
		    devopsSourcesLastCommitFile=devopsSourcesPath+"/src.dvp.last.commit"
			if (currentVerbose) println ("devopsSourcesLastCommitFile = " + devopsSourcesLastCommitFile)
		}
		try {
            workspaceContent=sh(returnStdout: true, script: "ls ${workspace} 2>/dev/null").trim()
        } catch (err){
        }       
        if (currentVerbose) println ("workspaceContent = " + workspaceContent)
		hasEmptyWorkspace=(""==workspaceContent)
        if (currentVerbose) println ("hasEmptyWorkspace = " + hasEmptyWorkspace)
		if (hasEmptyWorkspace) {
			hasNewDevopsSources=true
		} else {
			stage ('Assess New Sources'){
			    sh "touch ${devopsSourcesLastCommitFile}" 
			    devopsSourcesLastCommit = sh(returnStdout: true, script: "cat ${devopsSourcesLastCommitFile}").trim()
			    if (currentVerbose) println ("devopsSourcesLastCommit = " + devopsSourcesLastCommit)
		        try{
		            devopsSourcesCurrentCommit = sh(returnStdout: true, script: "git -C ${devopsSourcesGitRepoPath} rev-parse HEAD").trim()
				} catch (err){
				}
			    if (currentVerbose) println ("devopsSourcesCurrentCommit = " + devopsSourcesCurrentCommit)
				if (devopsSourcesCurrentCommit!=''){
					sh "echo \"${devopsSourcesCurrentCommit}\" > ${devopsSourcesLastCommitFile}"
				}
			    if (devopsSourcesCurrentCommit!=devopsSourcesLastCommit) {
			    	try{
			    		devopsSourcesDiffPreviousCommit=sh(returnStdout: true, script: "git -C ${devopsSourcesGitRepoPath} diff HEAD:${devopsSourcesRelativePath} HEAD^:${devopsSourcesRelativePath}").trim()
			    	} catch(err) {
			    	}
			    	if (currentVerbose) println ("devopsSourcesDiffPreviousCommit = " + devopsSourcesDiffPreviousCommit)
			    	if (devopsSourcesDiffPreviousCommit!=""){
		  				hasNewDevopsSources=true
			    	}
			    }
			}
		}
       	if (currentVerbose) println ("hasNewDevopsSources = " + hasNewDevopsSources)
		
        stage ('Prepare Variables'){
            // Get the Maven tool.
            // ** NOTE: This 'M3' Maven tool must be configured
            // **       in the global configuration.
            mvnHome = tool 'Maven 3.3.9 colocated'
        }
         if(hasNewDevopsSources){
            stage ('Devops Source Move'){
                  sh "rm -rf ${devopsSourcesPath}/src"	   
                  sh "mv ${devopsSourcesGitPath}/src ${devopsSourcesPath}"	   
                  sh "rm -rf ${devopsSourcesPath}/pom.xml"	   
                  sh "mv ${devopsSourcesGitPath}/pom.xml ${devopsSourcesPath}/pom.xml"
            }
        }
        if(currentVerbose){
            stage ('Variables Echo'){
            	sh "'${mvnHome}/bin/mvn' antrun:run@echobase -f ${devopsSourcesPath}/pom.xml"
                sh "'${mvnHome}/bin/mvn' antrun:run@echo -f ${devopsSourcesPath}/pom.xml"
            }
        }
        if (currentStopContainer){
            stage ('Docker Stop'){
                sh "'${mvnHome}/bin/mvn' docker:stop --non-recursive -Dmaven.test.skip=true -f ${devopsSourcesPath}/pom.xml"
            }
        }
        stage ('Docker Start'){
            sh "'${mvnHome}/bin/mvn' docker:start --non-recursive -Dmaven.test.skip=true -f ${devopsSourcesPath}/pom.xml"
        }
  		if (currentContinueTasks) {
			stage('Launch Depending Tasks') {
				int i=0;
				for (i=0;i<dependingTasks.size();i++){
					if (dependingTasks[i]!=""){
		    			//build job: 'eu.operando.int.jnk.tsk.build.images', wait: false
		    			if (currentVerbose) println ("starting job " + dependingTasks[i])
		    			build job: dependingTasks[i], wait: false, parameters: [booleanParam(name: 'stopContainer', value: false)]
					}
				}
		    }
		}            
	} catch (err) {
	    currentBuild.result = "FAILURE"
		emailext (
			subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
			body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
			<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
			recipientProviders: [[$class: 'DevelopersRecipientProvider']]
		)
		if (currentClearOnFail){
			stage ('Clear on Fail'){
            	sh "rm -rf ${WORKSPACE}/src"	   			
			}
		}		
	    throw err
	}
}
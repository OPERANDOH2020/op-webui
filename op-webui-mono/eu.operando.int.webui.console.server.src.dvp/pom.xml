<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>eu.operando.int.webui.rg.server.src.dvp</artifactId>
	<packaging>war</packaging>
	<parent>
		<groupId>eu.operando.int</groupId>
		<artifactId>eu.operando.int.src.dvp</artifactId>
		<version>ALPHA</version>
	</parent>
	<build>
		<!-- First we define the source code directories for a java application 
			server generated with swagger we will have two folders src/main and src/gen 
			maven conventions stablish one source folder but others can be added using 
			build-helper-maven-plugin add-source -->
		<!-- this is not considered and I need to add using the build-helper-maven-plugin -->
		<!-- <sourceDirectory>${sources.path}/src/main/java</sourceDirectory> -->
		<plugins>
			<!-- We check the value of some properties values -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<echo>Displaying values of properties</echo>
								<echo>[sources.path]=${sources.path}</echo>
								<echo>[project.build.sourceDirectory]=${project.build.sourceDirectory}</echo>
								<echo>[server.endpoint.path]=${server.endpoint.path}</echo>
								<echo>[server.warName]=${server.warName}</echo>
								<echo>[docker.image.name]=${docker.image.name}</echo>
								<echo>[docker.image.version]=${docker.image.version}</echo>
								<echo>[docker.port1.mapping]=${docker.port1.mapping}</echo>
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- as the sources are not at a standard place it is necessary to provide 
				the webxml location -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<warName>${server.warName}</warName>
				</configuration>
			</plugin>
			<!-- this is to fix the warning "Build path specifies execution environment 
				J2SE-1.5. There are no JREs installed in the workspace that are strictly 
				compatible with this environment. -->
			<!--   it maybe is adding problems problems
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin> -->
			<!-- Plugin to copy the war into generated folder accessible to the docker 
				file -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>copy-resource-one</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>src/main/docker/sources</outputDirectory>
							<resources>
								<resource>
									<directory>sources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- added to support docker image creation -->
			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<!-- last version in https://mvnrepository.com/artifact/org.jolokia/docker-maven-plugin -->
				<version>0.13.9</version>
				<configuration>
					<images>
						<image>
							<alias>${docker.name}</alias>
							<name>${docker.image.name}:${docker.image.version}</name>
							<build>
								<assembly>
									<!-- this time we will do it from a docker file element is needed 
										to switch the usage of the extrenal file -->
									<dockerFileDir>.</dockerFileDir>
									<!-- end -->
								</assembly>
							</build>
							<run>
								<namingStrategy>alias</namingStrategy>
								<env>

								</env>
								<ports>
									<port>${docker.port1.mapping}</port>
								</ports>
							</run>
						</image>
					</images>
				</configuration>
			</plugin>
			<!-- end of addition -->
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>1.0</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>1.0</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<!-- this is not considered and I need to add using the build-helper-maven-plugin -->
		<!-- <resources> -->
		<!-- <resource> -->
		<!-- <directory>${sources.path}/src/main/resources/config</directory> -->
		<!-- <filtering>true</filtering> -->
		<!-- </resource> -->
		<!-- </resources> -->
	</build>

	<properties>
		<server.endpoint.path>${operando.webui.rg.endpoint.path}</server.endpoint.path>
		<server.warName>${server.warName.generated}</server.warName>
		<docker.name>eu.operando.webui.rg.server</docker.name>
		<docker.image.name>${docker.registry.name}${docker.submitter}/${docker.name}</docker.image.name>
		<docker.image.version>${project.version}</docker.image.version>
		<docker.port1.external>${operando.webui.rg.port}</docker.port1.external>
		<docker.port1.mapping>${docker.port1.external}:8084</docker.port1.mapping>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

</project>
